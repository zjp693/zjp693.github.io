<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zjp693.github.io/</id>
    <title>学习笔记</title>
    <updated>2020-04-01T02:39:30.178Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zjp693.github.io/"/>
    <link rel="self" href="https://zjp693.github.io/atom.xml"/>
    <subtitle>一起努力💪，一起自律👍|顶端相见🎈🎈</subtitle>
    <logo>https://zjp693.github.io/images/avatar.png</logo>
    <icon>https://zjp693.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 学习笔记</rights>
    <entry>
        <title type="html"><![CDATA[Javacript基础选择题]]></title>
        <id>https://zjp693.github.io/post/javas-ji-chu-xuan-ze-ti/</id>
        <link href="https://zjp693.github.io/post/javas-ji-chu-xuan-ze-ti/">
        </link>
        <updated>2020-03-07T16:37:43.000Z</updated>
        <content type="html"><![CDATA[<h5 id="1-以下关于-function函数对象的说法不正确的是d">1、以下关于 Function函数对象的说法不正确的是（D ）</h5>
<pre><code class="language-js">A．函数可有可无返回值   
B．调用函数时传递的参数是实参 
C．函数调用时候，可以用一个变量来接收函数返回值 
D．函数必须要有形式参数 
</code></pre>
<h5 id="2-以下代码运行的结果是输出-b">2、以下代码运行的结果是输出( B)</h5>
<pre><code class="language-js">var a = b = 10;
(function () {
    var a = b = 20
})(); 
console.log(b); 
</code></pre>
<p>A．10     B．20     C．报错     D．undefined</p>
<h5 id="3-以下代码运行后的结果是输出-a">3、以下代码运行后的结果是输出( A  )</h5>
<pre><code class="language-js">var a = new Object();
a.name = &quot;admin&quot;;
console.log(a.name); 
</code></pre>
<p>A．admin  B．a    C．“admin”     D．[a]</p>
<h5 id="4-在-js-中15553-的运行结果是-c">4、在 JS 中，’1555’+3 的运行结果是(  C )</h5>
<p>A．1558     B．1552     C．15553     D．1553</p>
<h5 id="5-以下代码运行后弹出的结果是-b">5、以下代码运行后弹出的结果是(  B )</h5>
<pre><code class="language-js">var a = 888;
++a;
console.log(a++);
</code></pre>
<p>A．888     B．889     C．890     D．891</p>
<h5 id="6-关于变量的命名规则下列说法正确的是-abcde">6、关于变量的命名规则，下列说法正确的是（  ABCDE ）</h5>
<p>A．首字符必须是大写或小写的字母，下划线（_）或美元符（$）<br>
B．除首字母的字符可以是字母，数字，下划线或美元符<br>
C．变量名称不能是保留字<br>
D．长度是任意的<br>
E．区分大小写</p>
<h5 id="7-下列的哪一个表达式将返回值为假-b">7、下列的哪一个表达式将返回值为假（ B   ）</h5>
<p>A．!(3&lt;=1)<br>
B．(4&gt;=4)&amp;&amp;(5&lt;=2)<br>
C．(“a”==“a”)&amp;&amp;(“c”!=“d”)<br>
D．(2&lt;3)||(3&lt;2)</p>
<h5 id="8-下面代码k的运行结果是-b">8、下面代码，k的运行结果是（  B  ）</h5>
<pre><code class="language-js">var i = 0, j = 0;
for (i &lt; 10; j &lt; 6; i++ , j++) {
    k = i + j;
}
</code></pre>
<p>A．16     B．10     C．6     D．12</p>
<h5 id="9-下面代码的输出结果为-d">9、下面代码的输出结果为（ D ）</h5>
<pre><code class="language-js">var x = 1;
function fn(n) {
    n = n + 1;
};
y = fn(x);
console.log(y);
</code></pre>
<p>A．2     B．1     C．3     D．undefined</p>
<h5 id="10-1-2-3-4join0split的执行结果是-c">10、[1, 2, 3, 4].join(&quot;0&quot;).split(&quot;&quot;);的执行结果是（  C ）</h5>
<p>A．&quot;1,2,3,4&quot;<br>
B．[1,2,3,4]<br>
C．[“1”,“0”,“2”,“0”,“3”,“0”,“4”]<br>
D．”1,0,2,0,3,0,4&quot;</p>
<h5 id="11-下面代码的运行结果是-c">11、下面代码的运行结果是（   C）</h5>
<pre><code class="language-js">function fn1() {
    alert(1);
}
console.log(fn1);
</code></pre>
<p>A．1<br>
B．alert(1);<br>
C．function fn1() { alert(1); }<br>
D．Undefined</p>
<h5 id="12-以下代码运行后结果为-b">12、以下代码运行后，结果为（  B ）</h5>
<pre><code class="language-js">fn1();
var fn1 = function (a) {
    console.log(a);
} 
</code></pre>
<p>A．1     B．程序报错     C．alert(1);     D．undefined</p>
<h5 id="13-var-n-miao-wei-ke-tangindexofwei-6">13、var n = &quot;miao wei ke tang&quot;.indexOf(&quot;wei&quot;, 6);</h5>
<p>n的值为：（A   ）<br>
A．-1<br>
B．5<br>
C．程序报错<br>
D．-10</p>
<h5 id="14-下面对-substring-方法描述不正确的是-c">14、下面对 substring() 方法描述不正确的是（  C ）</h5>
<p>A．一共有两个参数，省略第二个参数表示从参数开始位置提、截取到字符串结束。<br>
B．提取之前会比较两个参数的大小，并根据大小调整位置。<br>
C．可以接收负数参数，负数表示从后往前数字符位置。<br>
D．如果没有设置参数，直接返回整个字符串。</p>
<h5 id="15-回答以下代码alert的值输出分别是多少-b">15、回答以下代码，alert的值输出分别是多少?( B)</h5>
<pre><code class="language-js">var a = 100;
function test(){
alert(a);
var a = 10;
alert(a);
}
test();
</code></pre>
<p>A、100 ，10  B、undefined，10    C、10，10     D、报错</p>
<h5 id="16-分析下段代码输出结果是b">16、分析下段代码输出结果是（B）</h5>
<pre><code class="language-js">var arr = [2, 3, 4, 5, 6];
var sum = 0;
for (var i = 1; i &lt; arr.length; i++) {
    sum += arr[i];
}
console.log(sum);
</code></pre>
<p>A．20     B．18     C．14     D．12</p>
<h5 id="17-回答以下代码alert的值输出分别是多少-a">17、 回答以下代码，alert的值输出分别是多少？( A)</h5>
<pre><code class="language-js"> var a = 100;
  function test() {
    alert(a);
    a = 10;
    alert(a);
  }
  test();
  alert(a);
</code></pre>
<p>A.100  10  10          B. 10  100  10<br>
C .10  10  100         D.100  100  100</p>
<h5 id="18-以下程序运行结束正确的是b">18、以下程序运行结束正确的是（B）</h5>
<pre><code class="language-js">var i = 10;
i++;
console.log(i);
var y = i++;
console.log(y);
y = ++i;
console.log(y);
y += 10;
console.log(y);
</code></pre>
<p>A.10 11 13 23      B. 11 11 13 23<br>
C.10 12 13 23      D.11 12 13 23</p>
<ol start="19">
<li>
<h5 id="下列代码的执结果是-a">下列代码的执结果是(  A )</h5>
</li>
</ol>
<pre><code class="language-js">function funcSwitch(sFlag) { 
    switch (sFlag) 
    { 
  case 'Test1': alert('Test1'); break; 
 case 'Test2': alert('Test2'); break;
 default: ;
     } 
    }
  funcSwitch('Test2');
</code></pre>
<p>A. Test2      B. Test1        C.undefined      D. null</p>
<h5 id="20下列代码的运行结果是-a">20.下列代码的运行结果是( A)</h5>
<pre><code class="language-js">var cars = ['BMW', 'Volvo', 'Saab', 'Ford'];
var i = 2, len = cars.length;
for (; i &lt; len; i++) {
  console.log(cars[i]);
}
</code></pre>
<p>A、SaabFord        B、 SaabVolvo<br>
C、 VolvoBMW      D、FordBMW</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML+CSS选择题]]></title>
        <id>https://zjp693.github.io/post/htmlcss-xuan-ze-ti/</id>
        <link href="https://zjp693.github.io/post/htmlcss-xuan-ze-ti/">
        </link>
        <updated>2020-03-07T16:36:52.000Z</updated>
        <content type="html"><![CDATA[<h4 id="单选题">单选题</h4>
<h5 id="1关于web标准下列说法正确的是-c">1.关于WEB标准下列说法正确的是：( 	C )</h5>
<p>A.html决定页面的行为，css决定页面的样式，js决定页面的结构。<br>
B.html决定页面的样式，css决定页面的结构，js决定页面的行为。<br>
C.html决定页面的结构，css决定页面的样式，js决定页面的行为。<br>
D.以上都不正确。</p>
<h5 id="2web标准里面规定三层分离不包括哪部分-d">2.web标准里面规定三层分离不包括哪部分( D )</h5>
<p>A.HTML<br>
B.CSS<br>
C.javsScript<br>
D.PHP</p>
<h5 id="3关于web标准下列说法正确的是-b">3.关于WEB标准下列说法正确的是 (	B	)</h5>
<p>A.html相当于人的动作行为，CSS相当于人的穿着打扮，JavaScript相当于人的骨架结构<br>
B.html相对于人的骨架结构，CSS相当于人的穿着打扮，JavaScript相当于人的动作行为<br>
C.html相当于人的穿着打扮，CSS相当于人的骨架结构，JavaScript相当于人的动作行为<br>
D.html相当于人的骨架结构，CSS相当于人的动作行为，JavaScript相当于人的穿着打扮</p>
<h5 id="4关于标签下列说法正确的是-b">4.关于标签下列说法正确的是 (	B	)</h5>
<p>A.P1是段落标签<br>
B.H1是标题标签<br>
C.Hr是换行标签<br>
D.Br是一条直线</p>
<h5 id="5关于标签下列说法不正确的是-b">5.关于标签下列说法不正确的是 (	B)</h5>
<p>A.H标签有6个等级分别是<h1>、<h2>、<h3>、<h4>、<h5>、<h6><br>
B.h1到h6文字从小到大（从大到小）<br>
C.p标签一行只能放一个（块元素独占一行）<br>
D.p是段落标签会给文字加上段落的语义</p>
<h5 id="6当网页显示图标时鼠标滑上图片显示文字描述是以下哪个属性b">6.当网页显示图标时，鼠标滑上图片显示文字描述是以下哪个属性(	B)</h5>
<p>A.设置alt属性(图片不显示的时候，显示的是alt设置的值)<br>
B.设置title属性(鼠标滑动到图片上显示的内容)<br>
C.设置href属性（没有这个属性）<br>
D.设置src属性 （这个是设置图片的链接地址）</p>
<h5 id="7在html中使用img标签插入图像下列选项关于img的src属性说法正确的是b">7.在HTML中，使用<img>标签插入图像，下列选项关于<img>的src属性说法正确的是(	B)</h5>
<p>A.用来设置图片的格式<br>
B.用来设置图片的所在位置 (src)<br>
C.用来设置鼠标指向图片时显示的文字(title)<br>
D.用来设置图片是否能正确显示（alt）</p>
<h5 id="8在html中关于a标签说法不正确的是c">8.在HTML中，关于a标签说法不正确的是(	C)</h5>
<p>A.a标签可以通过href属性跳转到另外一个页面<br>
B.a标签可以通过target属性设置是否在新窗口打开<br>
C.a标签只能在当前页面设置锚点链接，让用户能够快速定位到目标内<br>
D.a标签可以通过href=”#”设置一个空链接</p>
<h5 id="9在页面中看不见的表单元素是那种-c">9.在页面中看不见的表单元素是那种？( C)</h5>
<p>A  <input type="password">（设置密码的表单）<br>
B  <input type="radio">（设置单选框的表单）<br>
C  <input type="hidden">（设置隐藏域的表单）<br>
D  <input type="reset">（设置重置样式的表单）</p>
<h5 id="10如何显示没有下划线的超链接-a">10.如何显示没有下划线的超链接？ ( A)</h5>
<p>A. a {text-decoration:none}<br>
B a {text-decoration:no underline}<br>
C a {underline:none}<br>
D a {text-decoration:no underline}</p>
<h5 id="11css元素有哪几种显示方式-a">11.CSS元素有哪几种显示方式( A )</h5>
<p>A.block	inline	inline-block<br>
B.block 	none 	inline-block<br>
C.none	inline	inline-block<br>
D.block	inline	none</p>
<h5 id="12根据下列代码计算-盒子宽高下列说法正确的是a">12.根据下列代码计算 盒子宽高下列说法正确的是(A	)</h5>
<p>(A)	宽度为166px,高度为146px<br>
(B)	宽度为366px ,高度为 346px<br>
(C)	宽度为166px, 高度为346px<br>
(D)	宽度为306px，高度为306px</p>
<h5 id="13根据下列代码计算-盒子宽高下列说法正确的是a">13.根据下列代码计算 盒子宽高下列说法正确的是(	A)</h5>
<p>(A)宽度为126px,高度为126px<br>
(B)宽度为326px ,高度为 326px<br>
(C)宽度为166px, 高度为326px<br>
(D)宽度为306px，高度为306px</p>
<h5 id="14根据下列代码计算-盒子宽高下列说法正确的是a">14.根据下列代码计算 盒子宽高下列说法正确的是(A)</h5>
<p>(A)宽度为146px,高度为126px<br>
(B)宽度为326px ,高度为 326px<br>
(C)宽度为146px, 高度为326px<br>
(D)宽度为306px，高度为306px</p>
<p>(记住这个计算公式:)</p>
<p>盒子宽度计算: width+border-left+border-right+padding-left+padding-right<br>
盒子高度计算:height+border-top+border-bottom+padding-top+padding-bottom</p>
<h5 id="15关于html语义化以下哪个说法是正确的d">15.关于HTML语义化，以下哪个说法是正确的（D）？</h5>
<p>A: 语义化的HTML有利于机器的阅读，如PDA手持设备、搜索引擎爬虫；但不利于人的阅读</p>
<p>B: Table 属于过时的标签，遇到数据列表时，需尽量使用 div 来模拟表格</p>
<p>C: 语义化是HTML5带来的新概念，此前版本的HTML无法做到语义化</p>
<p>D: header、article、address都属于语义化明确的标签</p>
<h5 id="16制作移动端页面-以下哪种布局方式不合适c">16.制作移动端页面, 以下哪种布局方式不合适(C )</h5>
<p>A: A.响应式Responsive（使用@media媒体查询，给不同尺寸和介质的设备切换不同的样式）</p>
<p>B: B.伸缩Flexbox（使用CSS3 Flex系列属性进行相对布局）</p>
<p>C: C.固定Fixed（使用px和pt这样的绝对单位进行固定布局）</p>
<p>D: D.流动Fluid（使用%百分比进行相对布局）</p>
<h5 id="17下面选项中关于box-sizingborder-box的计算正确的是哪项d">17.下面选项中关于box-sizing:border-box的计算正确的是哪项（D）？</h5>
<p>A: 盒子实际宽度 = padding + content</p>
<p>B: 盒子实际宽度 = padding + margin</p>
<p>C: 盒子实际宽度 = content + padding + border +margin</p>
<p>D: 盒子实际宽度 = content + padding + border</p>
<h5 id="18如果想设置下列-the-first-paragraph标签的背景色为红色正确的是b">18.如果想设置下列” The first paragraph”标签的背景色为红色，正确的是（B）</h5>
<pre><code class="language-html">&lt; h1 &gt; This is a heading&lt;/h1 &gt;
&lt;p&gt;The first paragraph.&lt;/p&gt;
&lt;p&gt;The second paragraph.&lt;/p&gt;
&lt;p&gt;The third paragraph.&lt;/p&gt;
&lt;p&gt;The fourth paragraph.&lt;/p&gt;
</code></pre>
<p>A: p:nth-child(1){background:red};</p>
<p>B: p:nth-child(2){background:red};</p>
<p>C: p:nth-last-child(n){background:red};</p>
<p>D: p:nth-child(2n){background:red};</p>
<h5 id="19使用css的flexbox布局不能实现以下哪一个效果d">19.使用CSS的flexbox布局，不能实现以下哪一个效果（D）？</h5>
<p>A: 多列布局，随容器宽度等宽弹性伸缩</p>
<p>B: 多列布局，平均分配宽度</p>
<p>C: 多列布局，左列宽度像素数确定，中、右列随容器宽度等宽弹性伸缩</p>
<p>D: 多列布局， 不占有位置</p>
<h5 id="20以下位于-head-间的代码片段是做什么用的-meta-name-viewport-content-widthdevice-width-initial-scale1-d">20.以下位于 &lt; head &gt; 间的代码片段是做什么用的 &lt; meta name = &quot;viewport&quot; content = &quot;width=device-width, initial-scale=1&quot; &gt; （D）？</h5>
<p>A: 使得页面编码合乎移动端要求</p>
<p>B: 表示支持响应式设计</p>
<p>C: 添加后才能正常的缩放</p>
<p>D: 表示针对移动端进行适当的适配</p>
<h5 id="21以下哪个不是伪类选择器c">21.以下哪个不是伪类选择器（C）</h5>
<p>A: E:first-child;</p>
<p>B: E:last-child;</p>
<p>C: E:before;</p>
<p>D: E:nth-child(n);</p>
<h5 id="22伪元素选择器beforeafter必须包含的属性是c">22.伪元素选择器before&amp;after必须包含的属性是（C）</h5>
<p>A: position;</p>
<p>B: display;</p>
<p>C: content;</p>
<p>D: background;</p>
<h5 id="23css3中设置边框阴影的属性是a">23.CSS3中设置边框阴影的属性是（A）</h5>
<p>A: box-shadow;</p>
<p>B: text-shadaow;</p>
<p>C: text-align;</p>
<p>D: text-direction;</p>
<h5 id="24在调用动画中animation-delay属性的作用是b">24.在调用动画中animation-delay属性的作用是（B）</h5>
<p>A:  设置动画动画执行速度;</p>
<p>B:  设置动画延迟;</p>
<p>C:  设置动画名称;</p>
<p>D:  设置动画执行次数;</p>
<h5 id="25指定一个盒子为伸缩盒子需要设置的属性是c">25.指定一个盒子为伸缩盒子需要设置的属性是（C）</h5>
<p>A: display:block;</p>
<p>B: display:none;</p>
<p>C: display:flex;</p>
<p>D: display:inline;</p>
<h5 id="26sass中-变量的命令使用什么符号开头a">26.sass中 变量的命令使用什么符号开头（A）</h5>
<p>A: $;</p>
<p>B: @;</p>
<p>C: &amp;;</p>
<p>D: *;</p>
<h5 id="27一个a标签想实现一个圆那么以下样式书写正确的是c">27.一个a标签，想实现一个圆，那么以下样式书写正确的是（C）</h5>
<p>A: a{display：block;width:20px;height:20px;border:5px solid #f00;border-radius:10px;}</p>
<p>B: a{display：block;width:20px;height:20px;border:5px solid #f00;border-radius:5px;}</p>
<p>C: a{display：block;width:20px;height:20px;border:5px solid #f00;border-radius:50%;}</p>
<p>D: a{display：block;width:20px;height:20px;border:5px solid #f00;border-radius:14px;}</p>
<h5 id="28下面关于背景样式说法不正确的是a">28.下面关于背景样式，说法不正确的是（A）</h5>
<p>A: 默认情况下， 背景图片是不平铺的</p>
<p>B: color设置的是文本颜色， background-color设置的是背景颜色</p>
<p>C: CSS Sprite技术是借助background-position属性来实现的</p>
<p>D: 我们可以使用”background-repeat:repeat-x”,来实现背景图片在x轴方向平铺</p>
<h5 id="29在移动端如果想要设置用户不可进行缩放以下代码中正确的是哪一个d">29.在移动端如果想要设置用户不可进行缩放，以下代码中正确的是哪一个？（D）</h5>
<pre><code class="language-css">A: &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot; &gt;

B: &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=2.0&quot; &gt;

C: &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1.0&quot; &gt;

D: &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=no&quot; &gt;
</code></pre>
<h5 id="30下面哪个单位取决于html标签的font-size属性的值b">30.下面哪个单位，取决于html标签的font-size属性的值？（B）</h5>
<p>A: em</p>
<p>B: rem</p>
<p>C: px</p>
<p>D: pt</p>
<h5 id="31关于定位错误的是c">31.关于定位，错误的是：（C）</h5>
<p>A: z-index后面的数字越大在层叠样式中越居上，如：z-index:5在z-index:1上面</p>
<p>B: z-index数字后面不加单位，如：z-index:100;</p>
<p>C: 如果z-index的数值相同，先书写的在上面</p>
<p>D: 只有绝对定位，固定定位，相对定位，有此属性</p>
<h5 id="32移动端页面布局中以下描述不正确的是c">32.移动端页面布局中,以下描述不正确的是:（C）</h5>
<p>A:  父盒子设为Flex以后，子元素的float属性将失效。</p>
<p>B:  flex-direction属性决定主轴的方向（即项目的排列方向）。</p>
<p>C:  justify-content属性定义了项目在侧轴上的对齐方式。</p>
<p>D:  space-around：项目之间的间隔比项目与边框的间隔大一倍。</p>
<h5 id="33视口中-能够控制最大缩放的属性是d">33.视口中, 能够控制最大缩放的属性是（D）</h5>
<p>A: width;</p>
<p>B: user-scalable;</p>
<p>C: initial-scale;</p>
<p>D: maximun-scale;</p>
<h5 id="34关于伪元素的选项错误的是b">34.关于伪元素的选项错误的是（B）？</h5>
<p>A: ::before、::after是行内元素</p>
<p>B: 不使用content属性，也可以显示</p>
<p>C: 不可以使用JS控制</p>
<p>D: 最初伪元素的语法是使用“:”（一个冒号），在CSS3中伪元素使用“::”（两个冒号）</p>
<h4 id="多选题">多选题</h4>
<h5 id="下列哪些是css3的新特性多选abcde">下列哪些是CSS3的新特性【多选】（ABCDE）？</h5>
<p>A: 3D变换</p>
<p>B: 渐变</p>
<p>C: 2D变换（平移，缩放，旋转）</p>
<p>D: 媒体查询(新增媒体属性比如min-width)</p>
<p>E: CSS动画</p>
<h5 id="2以下关于less的使用正确的是abc">2.以下关于less的使用正确的是:（ABC）</h5>
<p>A:  Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、函数等特性，使 CSS 更易维护和扩展;</p>
<p>B:  如果需要直接引用写好的less文件, 只要在less样式表之前引入less.js文件即可;</p>
<p>C:  Less中可以直接进行数值运算;</p>
<p>D:  @import 的位置可随意放置;</p>
<h5 id="3以下媒体查询的描述说明正确的是多选abc">3.以下媒体查询的描述说明正确的是【多选】（ABC）？</h5>
<p>A: min-width：在pc端和移动端能正常的响应，效果一致</p>
<p>B: 如果是判断的是 min-width，那么范围区间应该从小到大写</p>
<p>C: 如果是判断的是 max-width，那么范围区间就应该从大到小写</p>
<p>D: 如果是判断的是 mid-width，那么范围区间就应该从中间位置写</p>
<h5 id="4rem与em的相关描述正确的是bcd">4.rem与em的相关描述正确的是:（BCD）</h5>
<p>A:  rem与em都是相对单位，我们使用它们的目的是为了适应各种手机屏幕;</p>
<p>B: rem和em都是是根据元素字体大小来进行计算的;</p>
<p>C: em是相对于父级元素的单位，会随父级元素的属性（font-size）变化而变化;</p>
<p>D:  rem是相对于根目录（HTML元素）的，所以它会随HTML元素的属性（font-size）变化而变化;</p>
<h5 id="5下面哪个媒体查询无法实现abcd">5.下面哪个媒体查询无法实现:（ABCD）</h5>
<p>A:  @media screen and(max-width:500px){ };</p>
<p>B:  @media screenand (max-width:500px){ };</p>
<p>C:  @media screen and (max-width:500px;){ };</p>
<p>D:  @ media screen and (max-width:500px){ };</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML+CSS简答题]]></title>
        <id>https://zjp693.github.io/post/htmlcss-jian-da-ti/</id>
        <link href="https://zjp693.github.io/post/htmlcss-jian-da-ti/">
        </link>
        <updated>2020-03-07T15:22:23.000Z</updated>
        <content type="html"><![CDATA[<p>[toc]</p>
<h5 id="1怎么让一个不定宽高的div水平垂直居中最少2种方式实现">1.怎么让一个不定宽高的div水平垂直居中？（最少2种方式实现）</h5>
<pre><code class="language-css">方式一：margin：auto：
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: auto;

方式二translate：
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

方式三flex：
    /* 给父盒子添加 */
    display: flex;
justify-content: center;
align-items:center;
</code></pre>
<p>2.请简述用css如何实现左侧宽度固定，右侧宽度自适应(用2种方式实现)<br>
方式一flex法：</p>
<pre><code class="language-css">html代码
 &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
</code></pre>
<pre><code class="language-css">css代码
html,body {
      display: flex;
      width: 100%;
      height: 100%;
      margin: 0;
      padding: 0;
    }

.left {
  width: 200px;
  height: 100%;
  background-color: red;
}

.right {
  flex: 1;
  background-color: blue;
}
</code></pre>
<p>方式二浮动法：<br>
Html代码</p>
<pre><code class="language-html">  &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
</code></pre>
<p>css代码</p>
<pre><code class="language-css">    html,
    body {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    position: relative;
  }

.left {
  float: left;
  width: 200px;
  height: 100%;
  background-color: red;
}
css
.right {
  height: 100%;
  /* 挤开左边盒子 */
  margin-left: 200px;
  background-color: blue;
}
</code></pre>
<h5 id="3请简述em和rem的区别">3请简述em和rem的区别？</h5>
<pre><code>em相对于元素的字体大小来计算，如果元素没有字体大小 ，则继续向上查找，直至有设置字体大小的元素，如果一直没有，就是根据浏览器默认的字体大小进行计算。
rem是根据html元素字体大小进行计算的
</code></pre>
<h5 id="4请简述css3有哪些新特性列举五个单词和汉语都写">4.请简述CSS3有哪些新特性，列举五个,(单词和汉语都写)</h5>
<pre><code>圆角:border-radius, 盒子阴影：box-shadow，动画:animation,  过渡:transition,旋转:rotate
</code></pre>
<h5 id="5请详细css的三大特性分别是什么">5.请详细CSS的三大特性分别是什么？</h5>
<pre><code class="language-css">层叠性：当相同选择器中存在了相同的属性时，根据就近原则，最下面的属性值覆盖上面的属性值

继承性：子元素继承父元素的某些样式，比如以text-、font-、line-等元素开头的样式，还有color样式可以被继承

优先级性：在将多个选择器应用于同一个标签时，根据权重所要优先选择哪个样式，就是优先级性
</code></pre>
<h5 id="6请简述什么是外边距塌陷并且怎么解决">6.请简述什么是外边距塌陷，并且怎么解决？</h5>
<pre><code class="language-css">外边距塌陷：假设b是a的子盒子，给子盒子b设置了外边距margin-top，a和b都会被向下移动
解决办法：

给父元素添加 border属性

给父元素添加 overflow: hidden (溢出: 隐藏)
</code></pre>
<h5 id="7请简述用两种方式实现三栏布局">7.请简述用两种方式实现三栏布局？</h5>
<p>方式一定位法：<br>
html代码：</p>
<pre><code class="language-html">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;center&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
</code></pre>
<p>css代码</p>
<pre><code class="language-css">html,
body {
position: relative;
width: 100%;
height: 100px;
    
/* 重置样式 */
margin: 0;
padding: 0;
}

/* 左定位 */
.left {
position: absolute;
top: 0;
left: 0;
width: 100px;
height: 100%;
background-color: red;
}

/* 中间自适应 */
.center {
height: 100%;
background-color: pink;

/* 挤开左右 */
margin-left: 100px;
margin-right: 100px;
}

/* 右定位 */
.right {
position: absolute;
top: 0;
right: 0;
width: 100px;
css
height: 100%;
background-color: blue;
}
</code></pre>
<p>方式二flex法：<br>
html代码：</p>
<pre><code class="language-html">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;center&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
</code></pre>
<p>css代码</p>
<pre><code class="language-css">html,
body {
/* 伸缩盒子 */
display: flex;
width: 100%;
height: 100px;

/* 重置样式 */
margin: 0;
padding: 0;
}

.left {
width: 100px;
height: 100%;
background-color: red;
}

.center {
/* 剩余空间占比 */
flex: 1;
background-color: pink;
}

.right {
width: 100px;
height: 100%;
background-color: blue;
}
</code></pre>
<h5 id="8请简述css中-link-和import-的区别是什么">8.请简述CSS中 link 和@import 的区别是什么？</h5>
<pre><code class="language-css">a. link属于HTML标签，而@import是CSS提供的，且只能加载 CSS
b. 页面被加载时，link会同时被加载，而@import引用的CSS会等到页面被加载完后再加载
c. @import只在IE5以上才能识别，而link是HTML标签，无兼容问题
d. link引入方式的权重 高于@import的权重
</code></pre>
<h5 id="9请简述css样式中rgba和opacity的透明效果有什么不同">9.请简述css样式中rgba()和opacity的透明效果有什么不同？</h5>
<pre><code class="language-css">a.opacity作用于元素，以及元素内的所有内容的透明度，rgba()只作用于元素的颜色或其背景色。
b. 设置rgba透明的元素的子元素不会继承透明效果
</code></pre>
<h5 id="10-行内元素和块级元素的区别是什么怎么将行内元素转为块级元素">10、行内元素和块级元素的区别是什么？怎么将行内元素转为块级元素？</h5>
<p>行内元素：<code>相邻行内元素在一行上，一行可以显示多个，不能设置宽高、内边距、外边距，只能嵌套文本和其他行内元素，默认宽度就是它本身内容的宽度。</code></p>
<p>块级元素：<code>独占一行，可以设置宽高、内边距、外边距，可以嵌套行内或块级元素，且文字类的块级元素不能放其他块级元素，宽度默认是容器(父级宽度)的100%。</code></p>
<p>行内元素转块级元素：<code>使用display: block(转换: 块级) 进行转换。</code></p>
<h5 id="11-行内元素有哪些块级元素有哪些行内块元素有哪些">11、行内元素有哪些？块级元素有哪些？行内块元素有哪些？</h5>
<p>行内元素有：<code>&lt;a&gt;、加粗(&lt;b&gt;、&lt;strong&gt;)、斜体（&lt;i&gt;、&lt;em&gt;）、删除线（&lt;s&gt;、&lt;del&gt;）、变小&lt;small&gt;、&lt;span&gt;、、</code></p>
<p>块级元素有：<code>&lt;p&gt;、&lt;h1&gt;到&lt;h6&gt;、&lt;div&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;li&gt;、&lt;table&gt;、&lt;tr&gt;、&lt;td&gt;、&lt;th&gt;、、</code></p>
<p>行内块元素有：<code>常见的&lt;img&gt;、&lt;input&gt;、&lt;td&gt;、、、、（具有行内和块级共同特性的元素）</code></p>
<h5 id="12-块元素有什么特点行内元素有什么特点">12、块元素有什么特点？行内元素有什么特点？</h5>
<p>块元素的特点是：<code>独占一行，可以设置宽高、内边距、外边距，可以嵌套行内或块级元素，且文字类的块级元素不能放其他块级元素，宽度默认是容器(父级宽度)的100%。</code></p>
<p>行内元素的特点是：<code>相邻行内元素在一行上，一行可以显示多个，不能设置宽高、内边距、外边距，只能嵌套文本和其他行内元素，默认宽度就是它本身内容的宽度。</code></p>
<h5 id="13-css的复合选择器有哪些举列子说明">13、css的复合选择器有哪些？举列子说明</h5>
<p>复合选择器有：</p>
<ul>
<li>
<p>后代选择器：<code>div div span {color: red};（选择的是div下的div下的span标签）</code></p>
</li>
<li>
<p>子代选择器：<code>div &gt; p {color: red};（选择的是div下的p标签(亲儿子)）</code></p>
</li>
<li>
<p>并集选择器：<code>div,span,p {color: red}; （选择的是div标签和span标签和p标签）</code></p>
</li>
<li>
<p>伪类选择器：<code>a: hover {color: green};（鼠标悬停在超链接上会显示出的样式(绿色的字体)）</code></p>
</li>
</ul>
<h5 id="14-背景的属性有哪些分别是什么作用">14、背景的属性有哪些？分别是什么作用？</h5>
<ul>
<li>
<p>背景颜色【background-color：选择引入颜色的格式】：<code>给元素添加背景颜色</code></p>
</li>
<li>
<p>背景图片【background-image：url(图片路径);】：<code>给元素添加背景图(默认全局平铺)</code></p>
</li>
<li>
<p>背景平铺方式【background-repeat：】：<code>给背景选择平铺的方式</code></p>
</li>
</ul>
<pre><code class="language-html">&lt;!--
	平铺方式的参数有:
	● 参数值：'repeat'
	  含义：背景图像在横向和纵向上平铺(默认)
	● 参数值：'no-repeat'
	  含义：背景图像不平铺，只显示一个	
	● 参数值：'repeat-x'
	  含义：背景图像在横向上平铺
	● 参数值：'repeat-y'
	  含义：背景图像在纵向上平铺
--&gt;
</code></pre>
<p>背景图片位置【background-position：水平位置  竖直位置】：<code>给图片选择所处位置</code></p>
<pre><code class="language-html">&lt;!--
	图片位置的参数有：
	● 参数值：length
	  含义：百分数| 由浮点数字和单位标识符组成的长度值
	● 参数值：position
	  含义：top | center | bottom | left | center | right 方位名词
--&gt;
</code></pre>
<h5 id="15-css的三大特性分别是什么请详细说明并且举例子">15、css的三大特性分别是什么，请详细说明，并且举例子</h5>
<p>层叠性：<code>层叠也叫覆盖，特点是：在相同选择器中存在相同属性时，根据就近原则，最下面的覆盖上面的。</code></p>
<pre><code class="language-css">	例子：
	div {
	color: red;
	}
	div{
	color: blue;
	}
	div{
	color: green;
	}
	【div的color的结果是绿色】
</code></pre>
<p>继承性：<code>相当于儿子继承老爹的财产，称作富二代。继承性的特点就是：父元素有的样式，子元素自然也能有，比如以text-，font-，line-等元素开头的样式，还有color。恰当的使用继承可以简化代码，降低css样式的复杂性。</code></p>
<pre><code class="language-html">&lt;!-- 例子：
	ul {
	font-size: 20px;
	color: red; 
	}
	【对于ul下的li标签里面的文字大小就是20px，文本颜色就是红色】

--&gt;
</code></pre>
<p>优先级性：<code>在将多个选择器应用于同一个标签时，所要优先选择哪个样式，就是优先级性，如果选择器相同，那么就考虑层叠性；如果选择器不同，那么根据选择器权重进行选择样式</code></p>
<pre><code class="language-html">&lt;!--
		○ 选择器：继承(子承父) 或 *(通配符)
          选择器权重：0, 0, 0, 0
		○ 选择器：标签选择器
          选择器权重：0, 0, 0, 1
		○ 选择器：类选择器 伪类选择器
          选择器权重：0, 0, 1, 0
		○ 选择器：ID选择器
          选择器权重：0, 1, 0, 0
		○ 选择器：行内样式 style=&quot;&quot;
          选择器权重：1, 0, 0, 0
		○ 属性值后面加：!important（代表至高无上的权重）
               该权重：无穷大+∞

--&gt;
</code></pre>
<h5 id="16-css哪些属性能够继承举例不得少于5个">16、css哪些属性能够继承，举例不得少于5个</h5>
<pre><code class="language-html">&lt;!--【颜色属性】--&gt;
&lt;color&gt;  注：background-color不具备继承性！

&lt;!--【text-开头的属性】--&gt;
&lt;text-decoration(文本装饰)、text-align(文本水平对齐方式)、text-indent(首行缩进)、、、&gt;

&lt;!--【font-开头的属性】--&gt;
&lt;font--size(字体大小)、font-family(字体种类)、font-weight(字体粗细)、font-style(字体风格)、、&gt;

&lt;!--【line-开头的属性】--&gt;
&lt;line-height(行高)、、&gt;    
</code></pre>
<h5 id="17-css权重计算规则">17、css权重计算规则</h5>
<pre><code class="language-html">&lt;!-- 权重计算例子如下： --&gt;
&lt;style&gt;
	/*❶ 0001 + 0001 + 0001 = 0003 */
	div ul li{}
    /*❷ 0010 + 0001 + 0001 = 0012 */
    .box ul li{} 
    /*❸ 0001 + 0001 = 0002 */
    ul li{}
    /*❹ 0001 */
    li{}
&lt;/style&gt;
&lt;!-- 因为：❷ &gt; ❶ &gt; ❸ &gt; ❹ --&gt;
&lt;!--【所以：最后选择权重最高的那个❷】--&gt;
&lt;!--【可根据个人计算习惯，结果正确即可】--&gt;
</code></pre>
<h5 id="18-浮动的元素有什么特点">18、浮动的元素有什么特点</h5>
<p>浮动元素的特点：</p>
<ul>
<li>会脱离普通(标准)流，好比进入另一个平面，与原来平面的元素不会产生实际影响，可指定浮动元素所要处在的位置</li>
<li>浮动后会在一行上显示，相邻浮动元素之间无间隙</li>
<li>会根据父盒子的宽度自动换行</li>
<li>如果没有给盒子设置宽度，会默认其宽度和父盒子一样，当给盒子添加浮动后，又会默认宽度跟着内容变化</li>
<li>任何元素皆可浮动，添加浮动后的元素具备与行内块元素相似的特性</li>
</ul>
<h5 id="19-清除浮动的方式把学过的都写出来非常重要">19、清除浮动的方式，把学过的都写出来，（非常重要）</h5>
<ul>
<li>给父盒子设置一个大于浮动元素的高从而包裹浮动元素<code>（视觉上清除浮动）</code></li>
<li>给父元素添加 <code>overflow:hidden(溢出:隐藏);</code> 样式</li>
</ul>
<h5 id="20css的三种引入方式分别是什么">20.CSS的三种引入方式分别是什么？</h5>
<p>1.行内式<br>
<code>&lt;标签 style=&quot;css属性:属性值;…&quot;&gt;&lt;/标签&gt;</code><br>
2.内嵌式</p>
<pre><code class="language-html">在head标签中写

&lt; style &gt;

标签名{ css属性: 属性值; … }

&lt;/style &gt;
</code></pre>
<p>3.外链式<br>
样式先写在css文件中，再使用link标签引入css文件</p>
<h5 id="21什么是外边距合并怎么解决把方法都写出来">21.什么是外边距合并，怎么解决，把方法都写出来</h5>
<p>外边距合并：竖直排列的两个盒子，如果两个盒子其中一个盒子添加了属性margin-top,另一个盒子添加了属性margin-bottom，那么两个盒子之间的距离等于最大的那个盒子的外边距而不是两者的外边距之和。<br>
解决办法：<br>
只给其中一个添加外边距</p>
<h5 id="22什么是外边距塌陷怎么解决把方法都写出来">22.什么是外边距塌陷，怎么解决，把方法都写出来</h5>
<p>外边距塌陷：<code>假设b是a的子盒子，给子盒子b设置了外边距margin-top，a和b都会被向下移动</code><br>
解决办法：</p>
<ul>
<li>给父元素添加 border属性</li>
<li>给父元素添加 overflow: hidden (溢出: 隐藏)</li>
</ul>
<h5 id="23复合选择器有哪些标志分别是什么">23.复合选择器有哪些，标志分别是什么？</h5>
<ul>
<li>后代选择器，标志是&quot;空格&quot;</li>
<li>子代选择器，标识是&quot;&gt;&quot;</li>
<li>并集选择器，标志是&quot;,&quot;</li>
<li>伪类选择器，标志是&quot;:&quot;</li>
</ul>
<h5 id="24元素显示模式有哪些分别列举3个该模式的标签">24.元素显示模式有哪些？分别列举3个该模式的标签</h5>
<ul>
<li>块元素 标签有：<code>div、h1~h6、ol、ul、li、p、table、、、</code></li>
<li>行内元素 标签有：<code>span、a、b(加粗)、strong、i(斜体)、em、、、</code></li>
<li>行内块元素 标签有：<code>img、input、、textarea、、、</code></li>
</ul>
<h5 id="25css3的三大特性分别是什么">25.CSS3的三大特性分别是什么？</h5>
<p>层叠性：当相同选择器中存在了相同的属性时，根据就近原则，最下面的属性值覆盖上面的属性值</p>
<p>继承性：子元素继承父元素的某些样式，比如以text-、font-、line-等元素开头的样式，还有color样式可以被继承</p>
<p>优先级性：在将多个选择器应用于同一个标签时，根据权重所要优先选择哪个样式，就是优先级性</p>
<h5 id="26权重的优先级顺序">26.权重的优先级顺序</h5>
<p>继承(子承父)或*(通配符) &lt; 标签选择器 &lt; 类选择器 = 伪类选择器 &lt; ID选择器 &lt; 行内样式 &lt; !important(权重无穷大)</p>
<h5 id="27清除浮动都有哪些方法具体说明">27.清除浮动都有哪些方法(具体说明)？</h5>
<pre><code class="language-css">清除浮动的方法：1. 隔墙法（额外标签法）：
在最后一个浮动元素末尾，添加一个空的标签， 添加clear: both样式     
例如：&lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;

overflow法：
给父元素添加属性：overflow: hidden;（溢出: 隐藏）;

单伪元素法：
给父元素添加after伪元素：
元素:after{
content: &quot;&quot;;
display: block;
height: 0;
clear: both;
}

双伪元素法：
给父元素添加before和after两个伪元素：
  .clearfix:before,
.clearfix:after {	  
 content: &quot;&quot;;
 display: table;	  
 }
.clearfix:after {
  clear: both;
 } 
.clearfix {
 *zoom: 1;
}
</code></pre>
<h5 id="28定位有哪些他们定位的参照物是什么">28.定位有哪些？他们定位的参照物是什么？</h5>
<ul>
<li>静态定位：代表无定位，无参照物</li>
<li>相对定位：定位的参照物是自身</li>
<li>绝对定位：定位的参照物是最近的那个有定位的祖先元素</li>
<li>固定定位：定位的参照物是浏览器的可视窗口</li>
</ul>
<h5 id="29元素的显示和隐藏方法有哪些">29.元素的显示和隐藏方法有哪些？</h5>
<pre><code class="language-css">1.display属性
  display: none;代表隐藏
  display: block;代表显示
2.visibility属性
  visibility: hidden;代表隐藏
  visibility /vɪzɪ'bɪlɪtɪ/: visible /ˈvɪzəbl/
3.overflow属性
  overflow: hidden;代表超出隐藏
  overflow: visible;代表显示
</code></pre>
<h5 id="30dispaly-none和visibility-hidden的区别是什么">30.dispaly: none和visibility: hidden的区别是什么？</h5>
<pre><code class="language-css">display: none;是彻底消失，隐藏时不会占位
visibility: hidden;是视觉上的消失，隐藏时仍然占位
</code></pre>
<h5 id="31图片标签是什么其属性有哪些至少四个">31.图片标签是什么，其属性有哪些（至少四个）</h5>
<p><code>&lt;img&gt;</code>   	<code>src图片路径</code> <code>title鼠标移动显示内容</code> <code>alt图片无法显示的时候显示内容</code> <code>width 图片宽</code> <code>height图片高</code><br>
链接是什么，其属性有哪些（至少三个）<br>
<a>标签	 <code>herf路径</code> <code>title提示标题</code> <code>target在新网页打开</code></p>
<h5 id="32文件路径有哪些">32.文件路径有哪些</h5>
<p>绝对路径：直接写网址<br>
相对路径：<code>./</code>当前     <code>../</code>上一层</p>
<h5 id="33有序列表和无序列表的标签是什么">33.有序列表和无序列表的标签是什么</h5>
<pre><code class="language-html">有序：&lt;ol&gt;
	&lt;li&gt;&lt;li&gt;
	&lt;/ol&gt;
无序:&lt;ul&gt;m
	&lt;li&gt;&lt;li&gt;
	&lt;/ul&gt;
</code></pre>
<h5 id="34css的三种书写方式是什么">34.css的三种书写方式是什么</h5>
<pre><code class="language-html">行内    &lt;标签 style=&quot;css属性名: 属性值;css属性名: 属性值;css属性名: 属性值;...&quot;&gt;&lt;/标签&gt;
 内嵌 &lt;head&gt;
     &lt;style&gt;
      选择器{
     属性名：属性值；
	&lt;/style&gt;
	&lt;/head&gt;
</code></pre>
<h5 id="35css选择器有哪些">35.css选择器有哪些</h5>
<p>id选择器</p>
<p>类选择器</p>
<p>通配符选择器</p>
<p>标签选择器</p>
<h5 id="36src和href的区别是什么">36.src和href的区别是什么</h5>
<p>src的内容是页面不可少的一部分 是引入<br>
href的内容是与该页面有关联 是引用</p>
<h5 id="37什么是外边距塌陷怎么解决把方法都写出来">37.什么是外边距塌陷，怎么解决，把方法都写出来</h5>
<p>假设b是父级盒子 a是子级 当给a margin-top时候 b本应该不动 但是却随a动了<br>
解决办法：给父元素添加border<br>
给父元素overflow：hidden</p>
<h5 id="38什么是外边距合并怎么解决把方法都写出来">38.什么是外边距合并，怎么解决，把方法都写出来、</h5>
<p>当两个盒子上下挨着且上下都有margin时候 他们的距离<br>
本应该是两个外边距的和 但却是最大的一个外边距<br>
解决方案：只给一个就可以</p>
<h5 id="39什么是盒模型一个盒子的width200pxpadding20pxborder1px-solid-ccc盒子的实际宽度是多少怎么计算的">39.什么是盒模型，一个盒子的width:200px,padding:20px,border:1px solid #ccc，盒子的实际宽度是多少，怎么计算的？</h5>
<p>盒子本身宽度200px   加上外边距左右20一共40 还有1px实线  左右两边 所以再加2px  等于242px</p>
<h5 id="40表格标签有哪些属性有哪些至少3个">40.表格标签有哪些，属性有哪些（至少3个）</h5>
<pre><code class="language-css">&lt;tr&gt; 行  &lt;td&gt;列  &lt;th&gt;单元格标题
border给table标签和td添加边框
cellspacing 设置单元格之间的距离
cellpadding 设置内容与单元格边框之间的距离
rowspan 跨行 从自己算1 跨一行+1
colspan 跨列 从自己算1 跨一行+1
</code></pre>
<h5 id="41如何合并单元格的行和列">41.如何合并单元格的行和列</h5>
<pre><code class="language-css">rowspan 跨行 从自己算1 跨一行+1
colspan 跨列 从自己算1 跨一行+1
</code></pre>
<h5 id="42文本装饰属性是什么其属性值有哪些至少3个">42.文本装饰属性是什么，其属性值有哪些（至少3个）</h5>
<pre><code class="language-css">text-decoration
none 取消装饰
underline 下划线
overline 上边线
line-through 删除线
</code></pre>
<h5 id="43怎么让元素垂直居中属性是哪个">43.怎么让元素垂直居中，属性是哪个</h5>
<pre><code class="language-css">让文字等于行高
line-height=行高
</code></pre>
<h5 id="44怎么让元素水平居中属性是哪个">44.怎么让元素水平居中，属性是哪个</h5>
<pre><code class="language-css">text-glign：center 居中
left 左对齐  right右对齐
</code></pre>
<h5 id="45字体大小-种类-粗细-风格的属性和属性值有哪些">45.字体大小、种类、粗细、风格的属性和属性值有哪些</h5>
<pre><code class="language-css">字体大小 font-size
字体种类 fout-family
字体粗细 font-weight
字体样式 font-style
normal正常  italic斜体
</code></pre>
<h5 id="46个标签可以有几个伪元素分别是哪几个">46.个标签可以有几个伪元素，分别是哪几个</h5>
<pre><code class="language-css">两个  before和after
</code></pre>
<h5 id="47怎么让一个不定宽高的盒子在另一个盒子中水平垂直居中写2种方式">47.怎么让一个不定宽高的盒子在另一个盒子中水平垂直居中（写2种方式）</h5>
<pre><code class="language-css">方式一margin：auto：
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
	margin: auto;

方式二translate：
    position: absolute;
    top: 50%;
    left: 50%;
	transform: translate(-50%, -50%);

方式三flex：
    /* 给父盒子添加 */
    display: flex;
	justify-content: cent ;
    align-items: center;
</code></pre>
<h5 id="48精灵图的使用方法">48.精灵图的使用方法？</h5>
<ul>
<li>定宽高，存放所需的精灵图</li>
<li>添加background-image: url(&quot;精灵图路径&quot;); 引入精灵图</li>
<li>调整位置选择需要的精灵图：background-position: -x -y;</li>
<li>如果需要再调整精灵图大小使用：background-size: ;</li>
</ul>
<h5 id="49em和rem的区别是什么">49.em和rem的区别是什么？</h5>
<p>em相对的是当前元素文本字体大小计算，如没有则相对浏览器默认的font-size值计算</p>
<p>rem相对的是根元素html的字体大小进行计算的</p>
<h5 id="50css中-link-和import-的区别是什么">50.CSS中 link 和@import 的区别是什么？</h5>
<p>a. link属于HTML标签，而@import是CSS提供的，且只能加载 CSS<br>
b. 页面被加载时，link会同时被加载，而@import引用的CSS会等到页面被加载完后再加载<br>
c. @import只在IE5以上才能识别，而link是HTML标签，无兼容问题<br>
d. link引入方式的权重,高于@import的权重</p>
<h5 id="51rgba和opacity的透明效果有什么不同">51.rgba()和opacity的透明效果有什么不同？</h5>
<p>a.opacity作用于元素，以及元素内的所有内容的透明度，rgba()只作用于元素的颜色或其背景色。</p>
<p>b. 设置rgba透明的元素的子元素不会继承透明效果</p>
<h5 id="52image标签上title属性与alt属性的区别是什么">52.<image>标签上title属性与alt属性的区别是什么？</h5>
<p>title属性：鼠标移到图片上显示&quot;标题内容&quot;</p>
<p>alt属性：当<img>加载不出来的时候，alt属性内容会替代<img>显示</p>
<h5 id="53css元素的三种显示模式">53.CSS元素的三种显示模式？</h5>
<p>行内元素：inline</p>
<p>块元素：block</p>
<p>行内块元素：inline-block</p>
<h5 id="54行内元素有哪些块级元素有哪些行内块元素有哪些">54.行内元素有哪些？块级元素有哪些？行内块元素有哪些？</h5>
<p>行内元素：<br>
span、a、b (加粗)、strong、s (删除线)、del、i (斜体)、em、、、、、、、</p>
<p>块级元素：<br>
h1~h6、p、div、ul、ol、li、、、、、、</p>
<p>行内块元素：<br>
input、img、textarea、</p>
<h5 id="55请至少写出5个h5的新标签">55.请至少写出5个H5的新标签？</h5>
<pre><code class="language-html">&lt; header &gt;&lt;/header &gt;  // 头部 
&lt;nav&gt;&lt;/nav&gt;     // 导航
&lt;main&gt;&lt;/main&gt;    // 主体
&lt;aside&gt;&lt;/aside&gt;   // 侧边
&lt;footer&gt;&lt;/footer&gt;  // 底部
</code></pre>
<ol start="56">
<li>
<h5 id="怎么定义动画怎么使用动画">怎么定义动画？怎么使用动画？</h5>
</li>
</ol>
<p>定义：<br>
<code>@keyframes</code> 动画名字 {<br>
&quot;定义需要的动画&quot;<br>
}<br>
使用：<br>
给需要的元素添加<code>animation</code>: 动画名 动画完成所需时间 动画速度 延迟、、、</p>
<p>具体代码：</p>
<pre><code class="language-css">定义动画1：from、to动画
@keyframes 动画名 {
            from {
                开始状态;
            }
            to {
                结束状态
            }
        }
定义动画2：百分比动画
@keyframes 动画名 {
            0% {
                开始状态
            }
            ···
            50% {
                过程n状态
            }
            ···
            100% {
                结束状态
            }
        }
使用：
/* 规定的动画名 */
            animation-name: name;
            /* 动画所需时长 */
            animation-duration: 时间;
            /* 动画运动曲线 */
            animation-timing-function: linear;
            /* 动画延迟时间（多久后开始动画） */
            animation-delay: 时间;
            /* 动画播放次数 */
            animation-iteration-count: infinite;

连写：animation: 动画名 运动所需时长 ···;没有顺序要求，也可缺省书写，但是动画名和所需时长必写，当同时出现动画时长和动画延迟时左数第一个会被识别为时长
</code></pre>
<h5 id="57说明css渐变有哪些分别是什么怎么使用">57.说明CSS渐变有哪些？分别是什么？怎么使用？</h5>
<ul>
<li>线性渐变：<code>linear-gradient</code>: 方向 初始色 结束色</li>
<li><code>background-image: linear-gradient</code>(to  渐变的最终方向, 初始颜色 最终颜色);</li>
<li>径向(圆形)渐变：<code>radial-gradient</code>: 主轴 次轴 at 原点x 原点y 初始色 结束色</li>
<li><code>background-image: radial-gradient</code>(圆心X 圆心Y at 渐变的X的起点 渐变的Y轴的起点, 渐变之的距离（可省略） 圆心中间的颜色, 扩散的颜色);<br>
<code>Background-image: radial-gradient(50px 50px at center center, hotpink 0%, skyblue 50%);</code></li>
</ul>
<h5 id="58css选择器优先级从大到小排序">58.CSS选择器优先级从大到小排序？</h5>
<p>!important(权重无穷大) &gt; 行内样式 &gt; ID选择器 &gt; 类选择器 = 伪类选择器 &gt; 标签选择器 &gt;继承(子承父)或*(通配符)</p>
<h5 id="59怎么用css实现多行文字超出显示为省略号">59.怎么用css实现多行文字超出显示为省略号？</h5>
<p><code>overflow: hidden;</code><br>
将对象作为弹性伸缩盒子模型显示<br>
<code>display: -webkit-box;</code><br>
设置子元素排列方式<br>
<code>-webkit-box-orient: vertical;</code><br>
设置显示的行数，多出的部分会显示为...<br>
<code>-webkit-line-clamp: 3;</code></p>
<h5 id="60实现左边固定200px右边自适应的方法2种方式">60.实现左边固定200px,右边自适应的方法（2种方式）</h5>
<p>说明：这是其中的2种，你可以通过别的方式实现也算：<br>
方式一flex法：<br>
html代码</p>
<pre><code class="language-html">&lt; div class=&quot;left&quot; &gt;&lt;/div &gt;
&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
</code></pre>
<p>css代码</p>
<pre><code class="language-css">html,
body {
display: flex;   
width: 100%;
height: 100%;
margin: 0;
padding: 0;
}
.left {
width: 200px;
height: 100%;
background-color: red;
}
.right {
flex: 1;
background-color: blue;
}
</code></pre>
<p>方式二浮动法：<br>
Html代码</p>
<pre><code class="language-html">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
</code></pre>
<p>css代码</p>
<pre><code class="language-css">html,
body {
width: 100%;
height: 100%;
margin: 0;
padding: 0;
position: relative;
}
.left {
float: left;
width: 200px;
height: 100%;
background-color: red;
}
.right {
height: 100%;
/* 挤开左边盒子 */
margin-left: 200px;
background-color: blue;
}
</code></pre>
<h5 id="62实现左边固定200px中间自适应右边固定200px的方法2种方式实现">62.实现左边固定200px,中间自适应，右边固定200px的方法(2种方式实现)？</h5>
<p>方式一浮动法：<br>
html代码：</p>
<pre><code class="language-html">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;center&quot;&gt;&lt;/div&gt;
</code></pre>
<p>css代码：</p>
<pre><code class="language-css">html,
body {
width: 100%;
height: 100px;
    
/* 重置样式 */
margin: 0;
padding: 0;
}

/* 左浮动 */
.left {
float: left;
width: 100px;
height: 100%;
background-color: red;
}

/* 中间自适应 */
.center {
height: 100%;
background-color: pink;
    
/* 挤开左右 */
margin-left: 100px;
margin-right: 100px;
}

/* 右浮动 */
.right {
float: right;
width: 100px;
height: 100%;
background-color: blue;
}
</code></pre>
<p>方式二定位法：<br>
html代码：</p>
<pre><code class="language-html">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;center&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
</code></pre>
<p>css代码：</p>
<pre><code class="language-css">html,
body {
position: relative;
width: 100%;
height: 100px;

/* 重置样式 */
margin: 0;
padding: 0;
}

/* 左定位 */
.left {
position: absolute;
top: 0;
left: 0;
width: 100px;
height: 100%;
background-color: red;
}

/* 中间自适应 */
.center {
height: 100%;
background-color: pink;

/* 挤开左右 */
margin-left: 100px;
margin-right: 100px;
}

/* 右定位 */
.right {
position: absolute;
top: 0;
right: 0;
width: 100px;
height: 100%;
background-color: blue;
}
</code></pre>
<p>方式三flex法：<br>
html代码：</p>
<pre><code class="language-html">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;center&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
</code></pre>
<p>css代码</p>
<pre><code class="language-css">html,
body {

/* 伸缩盒子 */
display: flex;
width: 100%;
height: 100px;

/* 重置样式 */
margin: 0;
padding: 0;
}

.left {
width: 100px;
height: 100%;
background-color: red;
}

.center {
/* 剩余空间占比 */
flex: 1;
background-color: pink;
}

.right {
width: 100px;
height: 100%;
background-color: blue;
}
</code></pre>
<h5 id="63说你对sass的理解和一些常用的语法有什么sass和less的有什么区别">63.说你对Sass的理解，和一些常用的语法有什么？Sass和Less的有什么区别？</h5>
<p>（找个题是开放性的，这个仅供参考，自己根据自己的理解去写，扩散思维）<br>
理解：Sass是一门css预处理语言，扩展css语言，添加了变量，函数等特性，让css更容易维护和扩展。</p>
<p>常用语法：①嵌套 ②&amp;  ③变量  ④混合器 ⑤继承、、</p>
<p>区别：1）在语法定义方面，比方说定义变量方面，Less通过@定义变量，Sass通过$定义变量，像混合器方面，			Less是通过.minxin的方式定义，Sass是通过@minxin的方式<br>
2）Sass支持条件语句，可以使用if{}else{},for{}循环等等，而Less不支持</p>
<h5 id="64css3的新属性有哪些举例说明5个中英文都写">64.css3的新属性有哪些？(举例说明5个，中英文都写)</h5>
<p>下面的必须牢记5个</p>
<pre><code class="language-css">1.圆角
border-radius	
2.阴影
1）文本阴影：text-shadow
2）盒子阴影：border-shadow
3.渐变
1）线性渐变：background-image: linear-gradient(方向,起始色,结束色);
2）圆形渐变：background-image: radial-gradient(主轴 次轴 at 圆点X 圆点Y, 起始色，结束色);
4.过渡
transition: ; 
5.2D转换
transform
6.转换原点
Transform-origin
7.3D变换
perspective
8.3D呈现
transform-style
9.动画
1）定义动画 @keyframes 动画名(identifier){ }
2）调用动画 animation
10.伸缩盒子（弹性盒子）
display: flex;
11.媒体查询
min-width、min-height、max-midth、max-height、、
</code></pre>
<h5 id="65-请列举6种表单元素">65. 请列举6种表单元素？</h5>
<pre><code class="language-css"> 表单元素有：
    ①	form（表单域）
    ②	input（表单控件）
    ③	button（按钮）
    ④	textarea（文本域）
    ⑤	select（下拉列表）
    ⑥	option（下拉列表选项）	
    下面的供参考：
    ⑦	fieldset（表单线框）
    ⑧	
    ⑨	legend（线框标题）
    ⑩	label（关联标签）

//  组合6个表单就可以，下面都是常用的,只要能写出6个就可以
&lt;input type=&quot;text&quot;&gt;        // 文本框
&lt;input type=&quot;radio&quot;&gt;       // 单选框
&lt;input type=&quot;checkbox&quot;&gt;    // 复选框
&lt;input type=&quot;password&quot;&gt;    //  密码框
&lt;form action=&quot;&quot;&gt;&lt;/form&gt;    // 表单
&lt;textarea  cols=&quot;&quot; rows=&quot;&quot;&gt;&lt;/textarea&gt;   // 文本框
&lt;select name=&quot;&quot; id=&quot;&quot;&gt;&lt;/select&gt;     // 下拉框
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Javacript基础编程题]]></title>
        <id>https://zjp693.github.io/post/javacript-ji-chu-bian-cheng-ti/</id>
        <link href="https://zjp693.github.io/post/javacript-ji-chu-bian-cheng-ti/">
        </link>
        <updated>2020-03-05T08:59:14.000Z</updated>
        <content type="html"><![CDATA[<p>目录</p>
<p>[toc]</p>
<h5 id="1定义2个数组let-arra-1233-let-arrb-2456求2个数组的并集交集">1.定义2个数组，let arrA = [1,2,3,3]; let arrB = [2,4,5,6]求2个数组的并集，交集</h5>
<pre><code class="language-js">let arrA = [1, 2, 3, 3];
let arrB = [2, 4, 5, 6];
let arrC = []
let arrD = arrA.concat(arrB)
console.log(arrD)

for (var i = 0; i &lt; arrA.length - 1; i++) {
    for (var u = 0; u &lt; arrB.length - 1; u++) {
        if (arrA[i] == arrB[u]) {
            arrC.push(arrA[i])
        }
    }
}
console.log(arrC)
</code></pre>
<h5 id="2随机产生一个十六进制的颜色值-例如90e353">2.随机产生一个十六进制的颜色值 ,例如：#90E353</h5>
<pre><code class="language-js">var str = &quot;#&quot;;
//一个十六进制的值的数组
var arr = [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;];
for (var i = 0; i &lt; 6; i++) {
  //产生的每个随机数都是一个索引,根据索引找到数组中对应的值,拼接到一起
  var num = parseInt(Math.random() * 16);
  str += arr[num];
}
console.log(str)
</code></pre>
<h5 id="3封装一个函数把一个时间日期对象转成yyyy-mm-dd-hhmmss">3.封装一个函数，把一个时间日期对象转成yyyy-mm-dd HH:mm:ss</h5>
<pre><code class="language-js">function time() {
    var c = new Date()
    var a = c.getSeconds()  //获取秒
    var minute = c.getMinutes()  //获取分钟
    var hour = c.getHours()    //获取小时
    var math = c.getMonth()    //返回月份   （从0开始）
    var year = c.getFullYear()  //返回年份
    var day = c.getDate()
    if (a &lt; 10) {
        a = &quot;0&quot; + a
    }
    if (minute &lt; 10) {
        minute = &quot;0&quot; + minute
    }
    if (hour &lt; 10) {
        hour = &quot;0&quot; + hour
    }
    if (math &lt; 10) {
        math = &quot;0&quot; + math
    }
    if (day &lt; 10) {
        day = &quot;0&quot; + day
    }
    console.log(year + &quot;-&quot; + math + &quot;-&quot; + day + &quot; &quot; + hour + &quot;:&quot; + minute + &quot;:&quot; + a)
}
time()
</code></pre>
<h5 id="4获取指定数组中元素值为奇数的元素个数具体要求如下">4.获取指定数组中元素值为奇数的元素个数，具体要求如下：</h5>
<p>使用javascript定义函数getEvens实现要求：获取指定数组arr中元素值为奇数的元素个数，并返回</p>
<p>1).定义一个整数数组arr;<br>
2).获取4个1~50之间（包含1和50）的随机整数，并存入arr<br>
3).传递arr调用getEvens(arr)方法，获取返回值，并打印在控制台<br>
使用javascript定义函数getEvens实现要求：获取指定数组arr中元素值为奇数的元素个数，并返回</p>
<pre><code class="language-js"> 1).定义一个整数数组arr;
var arr = []

 2).获取4个1~50之间（包含1和50）的随机整数，并存入arr
for (var q = 0; q &lt; 4; q++) {
    arr.push(parseInt(Math.random() * 50 + 1))
}
 console.log(arr)

 3).传递arr调用getEvens(arr)方法，获取返回值，并打印在控制台
function getEvens(arr) {
    console.log(arr);
}
getEvens(arr)
</code></pre>
<h5 id="5定义一个函数-接收一个字符串数组-方法中打印姓-张的名字">5.定义一个函数， 接收一个字符串数组， 方法中打印姓 &quot;张&quot;的名字</h5>
<p>输入： [&quot;张三丰&quot;,&quot;李晓阳&quot;,&quot;大张&quot;,&quot;刘张伟&quot;,&quot;张章&quot;]</p>
<p>输出： 张三丰 张章</p>
<p>要求： 至少用3中方式判断姓是张</p>
<pre><code class="language-js">var arr = [&quot;张三丰&quot;, &quot;李晓阳&quot;, &quot;大张&quot;, &quot;刘张伟&quot;, &quot;张章&quot;];
for (var i = 0; i &lt; arr.length; i++) {
  if (arr[i][0] == &quot;张&quot;) {
  console.log(arr[i])
  }
}
</code></pre>
<h5 id="6找字符串里面的最长的单词和单词的长度">6.找字符串里面的最长的单词和单词的长度</h5>
<pre><code class="language-js">方式一：var s = &quot;yuan yuan yuan jiang jiang yong aaaaaaaaaaaaa aaaaaaaaaaaaa odpsospoaioaoaoaoaoao&quot;;
var arr = s.split(' ');
console.log(arr);
var str = &quot;yuan yuan yuan jiang jiang yong aaaaaaaaaaaaa aaaaaaaaaaaaa odpsospoaioaoaoaoaoao&quot;;
var arr = str.split(&quot; &quot;); // 转成字符串数组
// 假设数组的第一项是最大的
var maxStr = arr[0];
for (var i = 1; i &lt; arr.length; i++) {
  if (maxStr.length &lt; arr[i].length) {
    maxStr = arr[i]
  }
}
console.log(maxStr, maxStr.length); //odpsospoaioaoaoaoaoao 21

方式二：var str = &quot;yuan yuan yuan jiang jiang yong aaaaaaaaaaaaa aaaaaaaaaaaaa odpsospoaioaoaoaoaoao&quot;;
//分割字符串成数组
var arr = str.split(&quot; &quot;)
//假设第一个是最大的
var max = arr[0].length
//遍历数组
for (var i = 1; i &lt; arr.length; i++) {
  // 判断第一个是不是最大的
  if (max &lt; arr[i].length) {
    //把arr[i].length的值赋给max
    max = arr[i].length
    sum = arr[i]
  }
}
console.log(sum, max);
</code></pre>
<h5 id="7用指定整数替换指定数组中的元素值要求">7.用指定整数替换指定数组中的元素值，要求：</h5>
<p>使用javasctipt实现如下要求完成：<br>
1).定义一个数组arr，数组arr的值分别是1、2、3、4、5、6、7、8、9<br>
2).用户输出一个新的的整数num<br>
3).如果整数num为偶数，则用num替换数组arr中所有的偶数下标的元素值，<br>
如果整数num为奇数，则用num替换数组arr中所有的奇数下标的元素值<br>
4)	.在控制台上打印修改后的数组中的所有的元素值</p>
<pre><code class="language-js">方式一：var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];  // 0是特殊的偶数
var num = 1
for (var i = 0; i &lt; arr.length; i++) {
  if (num % 2 == 0 &amp;&amp; i % 2 == 0) {
    arr[i] = num;
  } else if (num % 2 !== 0 &amp;&amp; i % 2 !== 0) {
    arr[i] = num;
  }
}
console.log(arr)

方式二：var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];  // 0是特殊的偶数
var num = 1
for (var i = 0; i &lt; arr.length; i++) {
  if (num % 2 == 0 &amp;&amp; i % 2 == 0) {
    arr[i] = num
  }
  if (num % 2 != 2 &amp;&amp; i % 2 != 0) {
    arr[i] = num
  }
}
console.log(arr);
</code></pre>
<h5 id="8编写函数function-getnumtimes函数中完成下面功能">8.编写函数function getNumTimes(),函数中完成下面功能：</h5>
<p>1)函数中定义长度是5的数组，数组元素为1-99(包含1和99)之间的随机数，打印出该数组的元素。<br>
2)提示用户输入2-5之间的数字num,<br>
3)遍历数组arr,<br>
4)筛选出数组中元素是num整数倍的所有数组元素，存放进一个新的数组中，该新的数组作为该方法返回值返回</p>
<h5 id="9用户定义一个数字数字的范围在-1-9999之间">9.用户定义一个数字，数字的范围在 1-9999之间，</h5>
<p>如果输入的数字是 1位数，则数字前面补全 3个0，使之成为”000x”<br>
如果输入的数字是2位数，则数字前面补全2个0,  使之成为”00xx”<br>
如果输入的数字是3位数，则数字前面补全1个0，使之成为”0xxx”<br>
如果输入的数字是4位数，则不用补全。<br>
最后将结果打印出来。</p>
<pre><code>
</code></pre>
<h5 id="10将字符串中所有的小写字母转成大写字母统计替换了多少个小写字母并将原来的大写字母转成小写字母统计替换了多少个大写字母">10.将字符串中所有的小写字母转成大写字母,统计替换了多少个小写字母，并将原来的大写字母转成小写字母，统计替换了多少个大写字母。</h5>
<p>示例：“abCDefG”转换后的结果是“ABcdEFg”</p>
<h5 id="11定义2个数组let-arra-1233-let-arrb-2456求2个数组的并集交集">11.定义2个数组，let arrA = [1,2,3,3]; let arrB = [2,4,5,6]求2个数组的并集，交集</h5>
<pre><code class="language-js">//并集
let arrA = [1, 2, 3, 3];
let arrB = [2, 4, 5, 6];
let arrC = []
let arrD = arrA.concat(arrB)
console.log(arrD)

//交集
for (var i = 0; i &lt; arrA.length - 1; i++) {
  for (var u = 0; u &lt; arrB.length - 1; u++) {
   if (arrA[i] == arrB[u]) {
    arrC.push(arrA[i])
    }
  }
}

console.log(arrC)
</code></pre>
<h5 id="定义方法-判定直角三角形-isrighttriangle参数为三角形的三条边返回值为布尔值是直角三角形为true否则false">定义方法 判定直角三角形, isRightTriangle,参数为三角形的三条边，返回值为布尔值，是直角三角形为true，否则false</h5>
<p>直接三角形判断方法：最大边的长度平方 = 剩余两条边的平方和<br>
示例：<br>
输入: isRightTriangle(5,3,4)<br>
返回：true<br>
解释：最大边长度5,5<em>5 = 3</em>3+4*4</p>
<p>示例：<br>
输入: isRightTriangle(3,6,4)<br>
返回：false<br>
解释：最大边长度6, 6<em>6=36 不等于 3</em>3+4*4</p>
<p>方法一</p>
<pre><code class="language-js">function isRightTriangle(a, b, c) {
  var m = Math.max(a, b, c);
  if (m == a &amp;&amp; a * a == (c * c + b * b)) {
    return true;
  }
  if (m == b &amp;&amp; b * b == (c * c + a * a)) {
    return true;
  }
  if (m == c &amp;&amp; c * c == (a * a + b * b)) {
    return true;
  }
  return false;
}
console.log(isRightTriangle(3, 6, 4))
</code></pre>
<pre><code class="language-js">Math.pow(a,2) // 这个Math.pow是求某个数的几次方

b*b = a*c +c*c  可以写成 Math.pow(a,2) = Math.pow(b,2)+Math.pow(c,2)
</code></pre>
<p>方法二</p>
<pre><code class="language-js">function isRightTriangle(a, b, c) {
  if (a &gt; b &amp;&amp; a &gt; c &amp;&amp; a * a == (c * c + b * b)) {
    return true
  } else if (b &gt; a &amp;&amp; b &gt; c &amp;&amp; b * b == (c * c + a * a)) {
    return true
  } else if (c &gt; a &amp;&amp; c &gt; b &amp;&amp; c * c == (a * a + b * b)) {
    return true
  } else {
    return false;
  }
}
console.log(isRightTriangle(3, 6, 5))
</code></pre>
<h5 id="12使用javascript-编写代码在控制台中输出字符串assdfscfwssseeeztmsa中出现次数最多的字符并统计出现的次数10分">12.使用javascript 编写代码，在控制台中输出字符串”assdfscfwssseeeztmsa”中出现次数最多的字符，并统计出现的次数（10分）</h5>
<pre><code class="language-js">var str = &quot;assdfscfwssseeeztmsa&quot;
var obj = {}
for (var i = 0; i &lt; str.length; i++) {
  if (obj[str[i]]) {
    obj[str[i]]++;
  } else {
    obj[str[i]] = 1;
  }
}
console.log(obj);

var maxTimes = 0
var alpha = &quot;&quot;
for (var key in obj) {
  if (maxTimes &lt; obj[key]) {
    maxTimes = obj[key]
    alpha = key
  }
}
console.log(`出现次数最多的字母是${alpha},出现的次数是${maxTimes}`)
</code></pre>
<h5 id="13使用js实现下列问题">13.使用js实现下列问题</h5>
<p>1)用户输入一个变量num，<br>
2)如果 num 能同时被 3 和 5 整除，返回字符串 fizzbuzz<br>
3)如果 num 能被 3 整除，返回字符串 fizz<br>
4)如果 num 能被 5 整除，返回字符串 buzz<br>
5)如果参数为空或者不是 Number 类型，返回 false<br>
6)其余情况，返回参数 num</p>
<pre><code class="language-js">function fizzBuzz(num){
  if(num &amp;&amp; typeof num == 'number'){
   if(num % 3 == 0 &amp;&amp; num % 5 == 0){
    return 'fizzbuzz'
       
    }else if(num % 3 == 0){
     return 'fizz'
        
   }else if(num % 5 == 0){
	return 'buzz'
       
    } else{
      return num;
    }
      
   }else{
    return false;
       
  }
}
console.log(fizzBuzz(15));
</code></pre>
<h5 id="14用变量n接收用户输入的数字当n为奇数时-返回-1-1-3-1-5-1-n-的和-当n为偶数时-返回-1-1-2-1-4-1-6-1-n-的和">14.用变量n接收用户输入的数字，当n为奇数时, 返回 1 + 1 / 3 + 1 / 5 +.....+ 1 / n 的和, 当n为偶数时, 返回 1 + 1 / 2 + 1 / 4 + 1 / 6 + .....+ 1 / n 的和;</h5>
<pre><code class="language-js">var n
if (n % 2 == 0) { 
  for (var i = 2, even = 0; i &lt;= n; i += 2) { 
    even += 1 / i;
  }
  console.log(even);

} else {
  for (var j = 1, odd = 0; j &lt;= n; j += 2) {
    odd += 1 / j;
  }
  console.log(odd);
}

for (var i = 1; i &lt;= 1000; i++) {
  if (i % 2 == 0 &amp;&amp; i % 10 != 0) {
    if (i % 6 == 0) {
      console.log(i);
    }
  }
}
</code></pre>
<h5 id="15-定义数组var-arr-12345612312将数组重复的元素去重请使用2种方式实现">15. 定义数组var arr = [1,2,3,4,5,6,1,2,3,1,2],将数组重复的元素去重,(请使用2种方式实现)</h5>
<pre><code class="language-js">var arr = [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2]
 var newArr = [];
  for (var i = 0; i &lt; arr.length; i++) {
    if (newArr.indexOf(arr[i]) == -1) {
    newArr.push(arr[i]);
   }
  }
  console.log(newArr);

function unique3(array) {
   var n = [array[0]]; //结果数组
   //从第二项开始遍历
   for (var i = 1; i &lt; array.length; i++) {

    //如果当前数组的第i项在当前数组中第一次出现的位置不是i，
    //那么表示第i项是重复的，忽略掉。否则存入结果数组

    if (array.indexOf(array[i]) == i) n.push(array[i]);
   }
   return n;
  }
</code></pre>
<h5 id="16写一个函数该函数用于计算一个正数的因子和比如6的因子和是123612">16.写一个函数，该函数用于计算一个正数的因子和（比如6的因子和是1+2+3+6=12）</h5>
<pre><code class="language-js">function get(num) {
    var sum = 0;
    for (i = 1; i &lt;= num; i++) {
        if (num % i == 0) {
            sum += i;
        };
    };
    return sum;
}
var result = get(6);
console.log(result);
</code></pre>
<h5 id="17编写一个函数计算任意两个数字之间所能组成的奇数个数数字必须是个位数-组成的奇数不能超过2位数数字可以循环使用">17.编写一个函数，计算任意两个数字之间所能组成的奇数个数，数字必须是个位数。（组成的奇数不能超过2位数，数字可以循环使用）</h5>
<p>比如： 计算0-3之间能组成的奇数个是01、03、11、13、21、23、31、33</p>
<pre><code class="language-js">function getOdd(m, n) {
    if (m &gt;= 10 || n &gt;= 10) {//如果m,n大于10 ，直接返回
        return;
    }
    if (m &gt; n) {//如果m大于n,调换m,n的位置
        var temp = m;
        m = n;
        n = temp;
    }
    //for循环生成i,j之间的所有值
    for (var i = m; i &lt;= n; i++) {
        for (var j = m; j &lt;= n; j++) {
            if (i != j &amp;&amp; j % 2 != 0) {//i!=j并且j不为偶数满足条件输出
                console.log(&quot;&quot; + i + j);//打印i,j的字符串输出
            }
        }
    }
}
getOdd(0, 3);
</code></pre>
<h5 id="18获取指定数组中元素值为偶数并且小于指定整数的元素个数要求如下">18.获取指定数组中元素值为偶数并且小于指定整数的元素个数，要求如下：</h5>
<p>使用javascript定义函数完成要求：获取指定数组arr中元素值小于指定整数num并且元素值为偶数的元素个数，返回获取到的元素个数</p>
<p>1)定义数组arr</p>
<p>2)用户输入5个整数，并存入数组arr中，输入前提示当前输入的是第几个整数</p>
<p>3)用户在输入1个整数num</p>
<p>4)传递数组arr和num调用getInfo(arr,num)方法，获取返回值，并在控制台打印输出</p>
<pre><code class="language-js">var num = prompt('请输入需要小于的一个指定整数');
function getInfo(arr, num) {
    var result = ''
    for (var i = 0; i &lt; arr.length; i++) {
        if (arr[i] % 2 == 0 &amp;&amp; arr[i] &lt; num) {
            result += arr[i] + ' ';
        }
    }
    return result;
}
var result = getInfo(arr, num);
alert(`${arr}中为偶数且小于${num}的元素是${result}`);
</code></pre>
<h5 id="19获取数组中元素值为偶数的累加和与元素值为奇数的累加和并计算出它们之间的差值要求">19.获取数组中元素值为偶数的累加和与元素值为奇数的累加和，并计算出它们之间的差值，要求：</h5>
<p>使用javascript定义函数 getNum(arr)，完成如下要求：<br>
1）用户输入5个整数，并存放在数组arr中 ，输入前提示输入的是第几个值<br>
2）获取指定数组arr中元素值为偶数的累加和<br>
3）获取指定数组arr中元素值为奇数的累加和<br>
4）返回偶数累加和与奇数累加和之间的差值<br>
5）传递数组arr调用getNum(arr)函数,获取返回值，并打印输出</p>
<pre><code class="language-js">   var arr = []
        var jsum = 0, osum = 0
        for (var i = 1; i &lt;= 5; i++) {
            var number = +prompt(&quot;请输入第&quot; + i + &quot;位整数&quot;)
            arr.push(number)
        }
        for (var j = 0; j &lt; arr.length; j++) {
            if (arr[j] % 2 == 0) {
                jsum += arr[j]
            }
            if (arr[j] % 2 != 0) {
                osum += arr[j]
            }
             }
    function getNum(arr) {
        console.log(osum - jsum);
    }
    getNum(arr)
</code></pre>
<h5 id="20求出1-1213-14-1100的和">20.求出1-1/2+1/3-1/4…..-1/100的和</h5>
<pre><code class="language-js">var i = 1; //分子始终为1,设i为分母
var sum = 0;
for (i = 1; i &lt;= 100; i++) {
    if (i % 2 == 0) {  //判断分母i是否为偶数，如果为偶数就乘以-1，使分母变为负数，此时运算符号变成-
        sum += 1 / (-1 * i);
    } else {  //如果i不为偶数，便正常进行加法运算
        sum += 1 / i;
    }
}
console.log(sum);
console.log(sum);
</code></pre>
<h5 id="21有一组带前缀的-整数-字母加数字-a5-b6-ab7-yr99-整数的位数都不确定-要求设计一个函数把这样的-整数-加上1">21.有一组带前缀的“ 整数”（ 字母加数字）：“ A5”, ”B6”, ”AB7”, ”YR99”， 整数的位数都不确定， 要求设计一个函数把这样的“ 整数” 加上1</h5>
<p>例如：<br>
“ A5” 经过方法运算后返回结果是“ A6”，<br>
“ AE7” 经过方法运算后返回结果是“ AE8”，<br>
“ YR99” 经过方法运算后返回结果是“ YR100”<br>
定义一个函数， 接收一个字符串： 字符串左边是英文字母， 右边是数字， 返回 + 1 后的结果</p>
<pre><code class="language-js">var str = 'hafff55hhhh'
for (var i = 0; i &lt; str.length; i++) {
    if (str[i] &gt;= 0 &amp;&amp; str[i] &lt;= 9) {
        break
    }
}
sum = +str.substr(i) + 1
num = str.slice(0, i)
console.log(num + sum);
</code></pre>
<h5 id="22查询学生相关信息使用javascript实现如下要求">22.查询学生相关信息，使用javascript实现如下要求：</h5>
<p>有一个二维数组，每条数据固定stuid表示学号,name表示姓名,gender表示性别<br>
var students = [<br>
{ stuid: &quot;S01&quot;, name: &quot;周夏&quot;, gender: &quot;男&quot;,score: 86 },<br>
{ stuid: &quot;S02&quot;, name: &quot;郑竹&quot;, gender: &quot;男&quot;,score: 77 },<br>
{ stuid: &quot;S03&quot;, name: &quot;吴兰&quot;, gender: &quot;女&quot;,score: 35},<br>
{ stuid: &quot;S04&quot;, name: &quot;李云&quot;, gender: &quot;男&quot;,score: 56 }<br>
];<br>
解释：{stuid:&quot;S01&quot;,name:&quot;周夏&quot;,gender:&quot;男&quot;}表示学生&quot;周夏&quot;的学号是&quot;S01&quot;，性别是&quot;男&quot;;</p>
<p>1.定义函数totalBySex，<br>
要求：接收学生信息二维数组students，函数中查询男生、女生各多少人并将结果返回<br>
示例：<br>
男生人数：3人<br>
女生人数：1人<br>
2.定义函数getMaxScore,<br>
要求:接收学生信息二维数组students,函数中找出成绩最高的学生姓名，并将结果返回</p>
<pre><code class="language-js">var students = [
    { stuid: &quot;S01&quot;, name: &quot;周夏&quot;, gender: &quot;男&quot;, score: 86 },
    { stuid: &quot;S02&quot;, name: &quot;郑竹&quot;, gender: &quot;男&quot;, score: 77 },
    { stuid: &quot;S03&quot;, name: &quot;吴兰&quot;, gender: &quot;女&quot;, score: 35 },
    { stuid: &quot;S04&quot;, name: &quot;李云&quot;, gender: &quot;男&quot;, score: 56 }
];
var j = 0, k = 0, sum = students[0]
for (var i = 0; i &lt; students.length; i++) {
    if (students[i].gender == &quot;男&quot;) {
        j++
    }
    if (students[i].gender == &quot;女&quot;) {
        k++
    }
    if (sum.score &lt; students[i].score) {
        sum = students[i].score
    }
}
function getMaxScore(students) {
    console.log(`男生人数${j}人，女生人数${k}人，最高成绩的同学是${sum}分`)
}
</code></pre>
<h5 id="23判分小程序-学生答案var-str-aabcda-正确答案var-ans-aaccbdb-表示一共5题-答对一题3分">23.判分小程序： 学生答案var str = &quot;a#ab#c#D#a&quot;, 正确答案var  ans = &quot;A#AC#C#BD#B&quot;, 表示一共5题， 答对一题3分</h5>
<p>定义函数， 接收学生答案和正确答案， 计算学生得分并返回分数</p>
<pre><code class="language-js">var ans = &quot;A#AC#C#BD#B&quot;
var str = &quot;a#ab#c#D#a&quot;
var str = str.toUpperCase()
var newans = ans.split(&quot;#&quot;)
var newstr = str.split(&quot;#&quot;)
var j = 0
for (var i = 0; i &lt; newans.length; i++) {
    if (newans[i] == newstr[i])
        j++
}
console.log(`${j * 3}分`);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jsvascript基础简答题]]></title>
        <id>https://zjp693.github.io/post/javascript-ji-chu-jian-da-ti/</id>
        <link href="https://zjp693.github.io/post/javascript-ji-chu-jian-da-ti/">
        </link>
        <updated>2020-03-05T04:01:47.000Z</updated>
        <summary type="html"><![CDATA[<p>文章收集于学校上课练习，互联网</p>
]]></summary>
        <content type="html"><![CDATA[<p>文章收集于学校上课练习，互联网</p>
<!-- more -->
<ol>
<li>
<h5 id="js数据类型有哪些怎么判断一个变量的数据类型">js数据类型有哪些，怎么判断一个变量的数据类型？</h5>
</li>
</ol>
<pre><code class="language-js">jS数据类型有：Number数字、String字符串、Boolean布尔、Null空、Undefined未定义、Object对象
使用 typeof 变量 可以判断该变量的数据类型，但是typeof只能判断的是简单数据类型，不能判断复杂数据类型。
</code></pre>
<ol start="2">
<li>
<h5 id="列举数组中常用的方法并说明各自的作用">列举数组中常用的方法，并说明各自的作用？</h5>
</li>
</ol>
<pre><code class="language-js">unshift();向数组的开头添加一个或更多元素，并返回新的长度。			 会改变数组的长度
push(); 向数组的末尾添加一个或多个元素，并返回新的长度。			 会改变数组的长度

shift();把数组的第一个元素从其中删除，并返回第一个元素的值。		    会改变数组的长度
pop(); 用于删除数组的最后一个元素并返回删除的元素。				   会改变数组的长度

indexOf(); 查看某个元素在数组中的下标位置，有返回下标，无返回-1
splice(开始元素，删除个数，添加元素); 增删改作用集一身  			   会改变原始数组。

slice(); 截取元素，返回的是截取之后元素组成的数组					不会改变原始数组
concat(); 合并数组，返回值是合并之后的新数组
</code></pre>
<ol start="3">
<li>
<h5 id="javascript中的循环有哪些while循环和dowhile的区别是什么">javascript中的循环有哪些，while循环和do...while的区别是什么？</h5>
</li>
</ol>
<pre><code class="language-js">for循环、while循环、do...while循环

区别：while先判断条件再执行，do..while先执行一次再判断条件是否继续执行
</code></pre>
<ol start="4">
<li>
<h5 id="javascript中的有几层含义分别是什么">javascript中的‘+’有几层含义，分别是什么？</h5>
</li>
</ol>
<pre><code class="language-js">第一层意义，当 + 号的两边都是number类型的时候，此时 + 号 代表数学符号加法

第二层意义，当 + 号的两边，只要有一边是string类型的时候，此时 + 号代表字符串的连接符

第三层意义，+可以进行数据类型的隐式转换，给一个string类型的数据前面加上+号，就会把这个字符串变成数字
</code></pre>
<ol start="5">
<li>
<h5 id="js中break-和-continue-的区别是什么">js中break 和 continue 的区别是什么？</h5>
</li>
</ol>
<pre><code class="language-js">break：跳出整个循环执行下面的代码
 continue：跳出本轮循环执行下一轮循环
</code></pre>
<ol start="6">
<li>
<h5 id="列举目前你遇到undefined的情况">列举目前你遇到undefined的情况？</h5>
</li>
</ol>
<pre><code class="language-js">1）变量只声明没有赋值，会返回undefined；

2）当下标超过数组或字符串的范围 ，会返回undefined；

3）当对象调用不存在的属性时，会返回undefined；

4）当return没有返回值，会返回undefined；
</code></pre>
<ol start="7">
<li>
<h5 id="产生一个10-50的随机数包含10也包含50">产生一个10-50的随机数(包含10也包含50)?</h5>
</li>
</ol>
<pre><code class="language-js">Math.random() * (50 - 10 + 1) + 10

【注意通用公式是: 产生一个[n,m]的整数，包含（n和m）

Math.ceil (Math.random()*(m-n)+n)】
</code></pre>
<ol start="8">
<li>
<h5 id="列举5个字符串的方法并说明各自的作用">列举5个字符串的方法，并说明各自的作用？</h5>
</li>
</ol>
<pre><code class="language-js">charAt(索引); 返回对象字符

concat(); 拼接字符串

indexOf(); 查找某串字符在字符串内的索引，有返回索引无返回-1

trim(); 去掉字符串前后的空格

slice() 从start位置 截取到end位置

split() 选择字符分割成数组储存
</code></pre>
<ol start="9">
<li>
<h5 id="join和split的区别是什么">join()和split()的区别是什么？</h5>
</li>
</ol>
<pre><code class="language-js">join()；是数组方法，把数组中的元素转成字符串连接

split(); 是字符串的方法，方法用于把一个字符串分割成字符串数组
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea+Github快速教程]]></title>
        <id>https://zjp693.github.io/post/grideagithub-kuai-su-jiao-cheng/</id>
        <link href="https://zjp693.github.io/post/grideagithub-kuai-su-jiao-cheng/">
        </link>
        <updated>2020-01-05T11:11:36.000Z</updated>
        <content type="html"><![CDATA[<h5 id="想知道如何使用gridea吗">想知道如何使用Gridea吗？</h5>
<p>Git</p>
<p>Git https://git-scm.com</p>
<h5 id="下载后安装">下载后安装</h5>
<p>安装完之后在桌面右键Git Bash Here，输入以下内容进行配置</p>
<p>$ git config --global user.name &quot;sailorlisa&quot;</p>
<p>$ git config --global user.email &quot;sailorlisa@outlook.com&quot;</p>
<h5 id="github">Github</h5>
<p>Github账号 https://github.com</p>
<p>每个github账号有1个免费的github pages</p>
<p>如果免费的已被占用（例如hexo），得自行注册新的github账号或者自行买域名，在仓库里的github pages里设置好</p>
<h5 id="仓库">仓库</h5>
<p>点击create a new repositories</p>
<p>输入Repository name：Cyberlisa.github.io。固定格式：.github.io</p>
<p>Description可填可不填。</p>
<h5 id="勾选public">勾选Public</h5>
<p>勾选Intialize this repository with a README(可不勾选)</p>
<p>点击Create repository</p>
<p>自动跳转到仓库页面，点击Insights后面的Settings</p>
<p>拉到下面GitHub Pages，看看有没有显示：Your site is published at https://cyberlisa.github.io/</p>
<p>没有的话稍微等一下再试</p>
<p>有的话点击链接跳转，看看能否打开</p>
<h5 id="token">Token</h5>
<p>在github界面点击头像，点击Settings——&gt;Personal settings——&gt;Developer settings</p>
<h5 id="找到最后的personal-access-tokensgenerate-new-token填写note勾选repogenerate-token">找到最后的Personal access tokens——&gt;Generate new token——&gt;填写Note——&gt;勾选repo——&gt;Generate token</h5>
<p>创建个txt文档，把token保存起来。如果不保存，那先不要关闭这个页面，待会儿需要用到token。</p>
<p>Gridea配置</p>
<h5 id="下载安装">下载安装</h5>
<p>在https://gridea.dev下载符合自己系统的客户端，安装。</p>
<p>安装完之后打开，如果在【文章】里看到一片空白，卸载整个客户端，重新安装。</p>
<h5 id="填配置">填配置</h5>
<p>如果打开后能看到默认的2篇文章，点击【配置】：</p>
<h5 id="platform-github-pages">Platform  Github Pages</h5>
<p>域名 Github Pages 对应的域名 https://cyberlisa.github.io/</p>
<p>仓库 github上仓库名 Cyberlisa.github.io</p>
<p>分支 Github Pages 对应的分支 master</p>
<p>仓库用户名  仓库所属用户的用户名 Cyberlisa</p>
<p>邮箱 Git 推送时的邮箱 sailorlisa@163.com</p>
<p>Token    上面步骤里的token</p>
<h5 id="cname-可不填">CNAME    可不填</h5>
<p>填完配置后，点击【保存】</p>
<p>无误后，点击【检测远程连接】</p>
<p>点击【预览】，会弹出浏览器，本地预览效果。</p>
<p>可在【主题】里选择其他内置主题，不要忘记拉到下面选择【保存】</p>
<p>选择了其他主题后，点击【预览】</p>
<p>如果没问题，点击【同步】</p>
<p>稍等3分钟左右，点击同步按钮下面那个像地球的网格图标，会在浏览器自动弹出博客网页。看看有没有什么问题。</p>
<p>在客户端里进行任何操作，不要忘记点击【保存】。保存了之后先预览，没问题再同步。</p>
<p>有问题点击https://github.com/getgridea/gridea里的【Issues】，在【Open】和【Closed】里看看有没有和你问题相似的issue。</p>
<h5 id="defender">Defender</h5>
<p>如果你是win10用户，在操作时出现异常，看看通知里有没有defender的警告。我一开始根本操作不了客户端，因为defender限制权限。把defender关了之后才能正常使用。</p>
<h5 id="更换walker主题">更换Walker主题</h5>
<p>在https://gridea.dev/themes/购买Walker主题，购买完后点击【下载文件】，下载后解压。</p>
<p>点击客户端里的【系统】，找到【源文件夹】，自己打开路径。退出Gridea客户端。</p>
<p>点击【themes】，把walker文件夹复制过来，打开Gridea客户端，打开【主题】，选择主题，滚动下鼠标，选中最后的Walker，保存。</p>
]]></content>
    </entry>
</feed>