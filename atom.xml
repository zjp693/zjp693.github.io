<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zjp693.github.io/</id>
    <title>学习笔记</title>
    <updated>2020-02-13T12:19:13.439Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zjp693.github.io/"/>
    <link rel="self" href="https://zjp693.github.io/atom.xml"/>
    <subtitle>欢迎光临本少爷的博客</subtitle>
    <logo>https://zjp693.github.io/images/avatar.png</logo>
    <icon>https://zjp693.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 学习笔记</rights>
    <entry>
        <title type="html"><![CDATA[大型分钱现场]]></title>
        <id>https://zjp693.github.io/post/ce-shi-wen-zhang</id>
        <link href="https://zjp693.github.io/post/ce-shi-wen-zhang">
        </link>
        <updated>2020-02-04T10:19:50.000Z</updated>
        <summary type="html"><![CDATA[<p>真才实料</p>
]]></summary>
        <content type="html"><![CDATA[<p>真才实料</p>
<!-- more -->
<p>哈哈哈哈哈哈哈哈哈哈哈。其实我什么都没有，就是随便放的图片<br>
<img src="https://zjp693.github.io//post-images/1580811640751.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组]]></title>
        <id>https://zjp693.github.io/post/shu-zu</id>
        <link href="https://zjp693.github.io/post/shu-zu">
        </link>
        <updated>2020-01-05T16:02:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-数组">1 - 数组</h2>
<h3 id="11-数组的概念">1.1 数组的概念</h3>
<ul>
<li>数组可以把一组相关的数据一起存放，并提供方便的访问(获取）方式。</li>
<li>数组是指<strong>一组数据的集合</strong>，其中的每个数据被称作<strong>元素</strong>，在数组中可以<strong>存放任意类型的元素</strong>。数组是一种将一组数据存储在单个变量名下的优雅方式。</li>
</ul>
<h3 id="12-创建数组">1.2 创建数组</h3>
<p>JS 中创建数组有两种方式：</p>
<ul>
<li>
<p>利用  new 创建数组</p>
<pre><code class="language-js">var 数组名 = new Array() ；
var arr = new Array();   // 创建一个新的空数组
</code></pre>
<p>注意 Array () ，A 要大写</p>
</li>
<li>
<p>利用数组字面量创建数组</p>
<pre><code class="language-js">//1. 使用数组字面量方式创建空的数组
var  数组名 = []；
//2. 使用数组字面量方式创建带初始值的数组
var  数组名 = ['小白','小黑','大黄','瑞奇'];
</code></pre>
<ul>
<li>数组的字面量是方括号 [ ]</li>
<li>声明数组并赋值称为数组的初始化</li>
<li>这种字面量方式也是我们以后最多使用的方式</li>
</ul>
</li>
<li>
<p>数组元素的类型</p>
<p>数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。</p>
<pre><code class="language-js">var arrStus = ['小白',12,true,28.9];
</code></pre>
</li>
</ul>
<h3 id="13-获取数组中的元素">1.3 获取数组中的元素</h3>
<p>​		索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。</p>
<figure data-type="image" tabindex="1"><img src="images%5C%E5%9B%BE%E7%89%871.png" alt="" loading="lazy"></figure>
<p>​		数组可以通过索引来访问、设置、修改对应的数组元素，可以通过“数组名[索引]”的形式来获取数组中的元素。</p>
<pre><code class="language-js">// 定义数组
var arrStus = [1,2,3];
// 获取数组中的第2个元素
alert(arrStus[1]);    
</code></pre>
<p>注意：如果访问时数组没有和索引值对应的元素，则得到的值是undefined</p>
<h3 id="14-遍历数组">1.4 遍历数组</h3>
<ul>
<li>
<p>数组遍历</p>
<p>​		把数组中的每个元素从头到尾都访问一次（类似学生的点名），可以通过 for 循环索引遍历数组中的每一项</p>
</li>
</ul>
<pre><code class="language-js">var arr = ['red','green', 'blue'];
for(var i = 0; i &lt; arr.length; i++){
    console.log(arrStus[i]);
}
</code></pre>
<ul>
<li>
<p>数组的长度</p>
<p>数组的长度：默认情况下表示数组中元素的个数</p>
<p>使用“数组名.length”可以访问数组元素的数量（数组长度）。</p>
<pre><code class="language-js">var arrStus = [1,2,3];
alert(arrStus.length);  // 3
</code></pre>
<p><strong>注意</strong>：</p>
<ul>
<li>此处数组的长度是数组元素的个数 ，不要和数组的索引号混淆。</li>
</ul>
</li>
<li>
<p>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</p>
<ul>
<li>数组的length属性可以被修改：</li>
</ul>
</li>
<li>
<p>如果设置的length属性值大于数组的元素个数，则会在数组末尾出现空白元素；</p>
<ul>
<li>如果设置的length属性值小于数组的元素个数，则会把超过该值的数组元素删除</li>
</ul>
</li>
</ul>
<h3 id="15-数组中新增元素">1.5 数组中新增元素</h3>
<p>​		数组中可以通过以下方式在数组的末尾插入新元素：</p>
<pre><code class="language-js">  数组[ 数组.length ] = 新数据;
</code></pre>
<h2 id="2-函数">2 - 函数</h2>
<h3 id="21-函数的概念">2.1 函数的概念</h3>
<p>​		在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。虽然 for循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。</p>
<p>​		函数：就是<strong>封装了一段可被重复调用执行的代码块</strong>。通过此代码块可以<strong>实现大量代码的重复使用</strong>。</p>
<h3 id="22-函数的使用">2.2 函数的使用</h3>
<h4 id="声明函数">声明函数</h4>
<pre><code class="language-js">// 声明函数
function 函数名() {
    //函数体代码
}
</code></pre>
<ul>
<li>
<p>function 是声明函数的关键字,必须小写</p>
</li>
<li>
<p>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</p>
</li>
</ul>
<h4 id="调用函数">调用函数</h4>
<pre><code class="language-js">// 调用函数
函数名();  // 通过调用函数名来执行函数体代码
</code></pre>
<ul>
<li>
<p>调用的时候千万不要忘记添加小括号</p>
</li>
<li>
<p>口诀：函数不调用，自己不执行</p>
<p>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p>
</li>
</ul>
<h4 id="函数的封装">函数的封装</h4>
<ul>
<li>
<p>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</p>
</li>
<li>
<p>简单理解：封装类似于将电脑配件整合组装到机箱中 ( 类似快递打包）</p>
<figure data-type="image" tabindex="2"><img src="images%5C%E5%9B%BE%E7%89%872.png" alt="" loading="lazy"></figure>
<p>例子：封装计算1-100累加和</p>
<pre><code class="language-js">/* 
   计算1-100之间值的函数
*/
// 声明函数
function getSum(){
  var sumNum = 0;// 准备一个变量，保存数字和
  for (var i = 1; i &lt;= 100; i++) {
    sumNum += i;// 把每个数值 都累加 到变量中
  }
  alert(sumNum);
}
// 调用函数
getSum();
</code></pre>
</li>
</ul>
<h3 id="23-函数的参数">2.3 函数的参数</h3>
<h4 id="函数参数语法">函数参数语法</h4>
<ul>
<li>
<p>形参：函数定义时设置接收调用时传入</p>
</li>
<li>
<p>实参：函数调用时传入小括号内的真实数据</p>
<figure data-type="image" tabindex="3"><img src="images%5C%E5%9B%BE%E7%89%873.png" alt="" loading="lazy"></figure>
<p>​	参数的作用 : 在函数内部某些值不能固定，我们可以通过参数在调用函数时传递不同的值进去。</p>
<p>函数参数的运用：</p>
<pre><code class="language-js">// 带参数的函数声明
function 函数名(形参1, 形参2 , 形参3...) { // 可以定义任意多的参数，用逗号分隔
  // 函数体
}
// 带参数的函数调用
函数名(实参1, 实参2, 实参3...); 
</code></pre>
<ol>
<li>调用的时候实参值是传递给形参的</li>
<li>形参简单理解为：不用声明的变量</li>
<li>实参和形参的多个参数之间用逗号（,）分隔</li>
</ol>
</li>
</ul>
<h4 id="函数形参和实参数量不匹配时">函数形参和实参数量不匹配时</h4>
<figure data-type="image" tabindex="4"><img src="images%5C%E5%9B%BE%E7%89%874.png" alt="" loading="lazy"></figure>
<pre><code>注意：在JavaScript中，形参的默认值是undefined。
</code></pre>
<p>小结：</p>
<ul>
<li>函数可以带参数也可以不带参数</li>
<li>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li>
<li>调用函数的时候，函数名括号里面的是实参</li>
<li>多个参数中间用逗号分隔</li>
<li>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li>
</ul>
<h3 id="24-函数的返回值">2.4 函数的返回值</h3>
<h4 id="return-语句">return 语句</h4>
<pre><code>返回值：函数调用整体代表的数据；函数执行完成后可以通过return语句将指定数据返回 。
</code></pre>
<pre><code class="language-js">// 声明函数
function 函数名（）{
    ...
    return  需要返回的值；
}
// 调用函数
函数名();    // 此时调用函数就可以得到函数体内return 后面的值
</code></pre>
<ul>
<li>在使用 return 语句时，函数会停止执行，并返回指定的值</li>
<li>如果函数没有 return ，返回的值是 undefined</li>
</ul>
<h4 id="break-continue-return-的区别">break ,continue ,return 的区别</h4>
<ul>
<li>break ：结束当前的循环体（如 for、while）</li>
<li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li>
<li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li>
</ul>
<h3 id="25-arguments的使用">2.5 arguments的使用</h3>
<p>​		当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p>
<ul>
<li>
<p>具有 length 属性</p>
</li>
<li>
<p>按索引方式储存数据</p>
</li>
<li>
<p>不具有数组的 push , pop 等方法</p>
<p>注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。</p>
</li>
</ul>
<h3 id="26-函数案例">2.6 函数案例</h3>
<pre><code>	函数内部可以调用另一个函数，在同一作用域代码中，函数名即代表封装的操作，使用函数名加括号即可以将封装的操作执行。
</code></pre>
<h3 id="27-函数的两种声明方式">2.7 函数的两种声明方式</h3>
<ul>
<li>
<p>自定义函数方式(命名函数)</p>
<p>利用函数关键字 function 自定义函数方式</p>
<pre><code class="language-js">// 声明定义方式
function fn() {...}
// 调用  
fn();  
</code></pre>
<ul>
<li>因为有名字，所以也被称为命名函数</li>
<li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li>
</ul>
</li>
<li>
<p>函数表达式方式(匿名函数）</p>
<p>利用函数表达式方式的写法如下：</p>
<pre><code class="language-js">// 这是函数表达式写法，匿名函数后面跟分号结束
var fn = function(){...}；
// 调用的方式，函数调用必须写到函数体下面
fn();
</code></pre>
<ul>
<li>因为函数没有名字，所以也被称为匿名函数</li>
<li>这个fn 里面存储的是一个函数</li>
<li>函数表达式方式原理跟声明变量方式是一致的</li>
<li>函数调用的代码必须写到函数体后面</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea+Github快速教程]]></title>
        <id>https://zjp693.github.io/post/grideagithub-kuai-su-jiao-cheng</id>
        <link href="https://zjp693.github.io/post/grideagithub-kuai-su-jiao-cheng">
        </link>
        <updated>2020-01-05T11:11:36.000Z</updated>
        <content type="html"><![CDATA[<h5 id="想知道如何使用gridea吗">想知道如何使用Gridea吗？</h5>
<p>Git</p>
<p>Git https://git-scm.com</p>
<h5 id="下载后安装">下载后安装</h5>
<p>安装完之后在桌面右键Git Bash Here，输入以下内容进行配置</p>
<p>$ git config --global user.name &quot;sailorlisa&quot;</p>
<p>$ git config --global user.email &quot;sailorlisa@outlook.com&quot;</p>
<h5 id="github">Github</h5>
<p>Github账号 https://github.com</p>
<p>每个github账号有1个免费的github pages</p>
<p>如果免费的已被占用（例如hexo），得自行注册新的github账号或者自行买域名，在仓库里的github pages里设置好</p>
<h5 id="仓库">仓库</h5>
<p>点击create a new repositories</p>
<p>输入Repository name：Cyberlisa.github.io。固定格式：.github.io</p>
<p>Description可填可不填。</p>
<h5 id="勾选public">勾选Public</h5>
<p>勾选Intialize this repository with a README(可不勾选)</p>
<p>点击Create repository</p>
<p>自动跳转到仓库页面，点击Insights后面的Settings</p>
<p>拉到下面GitHub Pages，看看有没有显示：Your site is published at https://cyberlisa.github.io/</p>
<p>没有的话稍微等一下再试</p>
<p>有的话点击链接跳转，看看能否打开</p>
<h5 id="token">Token</h5>
<p>在github界面点击头像，点击Settings——&gt;Personal settings——&gt;Developer settings</p>
<h5 id="找到最后的personal-access-tokensgenerate-new-token填写note勾选repogenerate-token">找到最后的Personal access tokens——&gt;Generate new token——&gt;填写Note——&gt;勾选repo——&gt;Generate token</h5>
<p>创建个txt文档，把token保存起来。如果不保存，那先不要关闭这个页面，待会儿需要用到token。</p>
<p>Gridea配置</p>
<h5 id="下载安装">下载安装</h5>
<p>在https://gridea.dev下载符合自己系统的客户端，安装。</p>
<p>安装完之后打开，如果在【文章】里看到一片空白，卸载整个客户端，重新安装。</p>
<h5 id="填配置">填配置</h5>
<p>如果打开后能看到默认的2篇文章，点击【配置】：</p>
<h5 id="platform-github-pages">Platform  Github Pages</h5>
<p>域名 Github Pages 对应的域名 https://cyberlisa.github.io/</p>
<p>仓库 github上仓库名 Cyberlisa.github.io</p>
<p>分支 Github Pages 对应的分支 master</p>
<p>仓库用户名  仓库所属用户的用户名 Cyberlisa</p>
<p>邮箱 Git 推送时的邮箱 sailorlisa@163.com</p>
<p>Token    上面步骤里的token</p>
<h5 id="cname-可不填">CNAME    可不填</h5>
<p>填完配置后，点击【保存】</p>
<p>无误后，点击【检测远程连接】</p>
<p>点击【预览】，会弹出浏览器，本地预览效果。</p>
<p>可在【主题】里选择其他内置主题，不要忘记拉到下面选择【保存】</p>
<p>选择了其他主题后，点击【预览】</p>
<p>如果没问题，点击【同步】</p>
<p>稍等3分钟左右，点击同步按钮下面那个像地球的网格图标，会在浏览器自动弹出博客网页。看看有没有什么问题。</p>
<p>在客户端里进行任何操作，不要忘记点击【保存】。保存了之后先预览，没问题再同步。</p>
<p>有问题点击https://github.com/getgridea/gridea里的【Issues】，在【Open】和【Closed】里看看有没有和你问题相似的issue。</p>
<h5 id="defender">Defender</h5>
<p>如果你是win10用户，在操作时出现异常，看看通知里有没有defender的警告。我一开始根本操作不了客户端，因为defender限制权限。把defender关了之后才能正常使用。</p>
<h5 id="更换walker主题">更换Walker主题</h5>
<p>在https://gridea.dev/themes/购买Walker主题，购买完后点击【下载文件】，下载后解压。</p>
<p>点击客户端里的【系统】，找到【源文件夹】，自己打开路径。退出Gridea客户端。</p>
<p>点击【themes】，把walker文件夹复制过来，打开Gridea客户端，打开【主题】，选择主题，滚动下鼠标，选中最后的Walker，保存。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://zjp693.github.io/post/hello-gridea</id>
        <link href="https://zjp693.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more --> 
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>